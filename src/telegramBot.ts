/**
 * Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
 */

import TelegramBot from "node-telegram-bot-api";
import {
  getPowerOutagesQuick,
  saveReport,
  createMarkdownReport,
} from "./index.js";
import {
  filterValidOutages,
  formatDateForDisplay,
  MY_PLACE,
  logger,
  getLatestReportInfo,
  SubscriptionManager,
  DatabaseManager,
  ADMIN_CHAT_IDS,
  escapeMarkdown,
  scheduler,
} from "./utils/index.js";
import type { PowerOutageInfo } from "./utils/types.js";
import { readFileSync } from "fs";
import { fileURLToPath } from "url";
import { dirname, join } from "path";

export class PowerOutageBot {
  private bot: TelegramBot;
  private isPolling: boolean = false;
  private subscriptionManager: SubscriptionManager;
  private notificationInterval?: NodeJS.Timeout | undefined;
  private pendingBroadcast?:
    | {
        message: string;
        adminChatId: number;
        timestamp: number;
      }
    | undefined;
  private pendingUnsubscribeAll?:
    | {
        adminChatId: number;
        timestamp: number;
        subscriberCount: number;
      }
    | undefined;

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ package.json –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  private getAppVersion(): string {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Docker/Dokploy)
      if (process.env.APP_VERSION) {
        return process.env.APP_VERSION;
      }

      // –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ—Ç, —á–∏—Ç–∞–µ–º –∏–∑ package.json
      const __filename = fileURLToPath(import.meta.url);
      const __dirname = dirname(__filename);
      const packageJsonPath = join(__dirname, "..", "package.json");
      const packageJson = JSON.parse(readFileSync(packageJsonPath, "utf-8"));
      return packageJson.version || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è";
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:", error);
      return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è";
    }
  }

  constructor(token: string) {
    this.bot = new TelegramBot(token, { polling: false });
    this.subscriptionManager = new SubscriptionManager();
    this.setupCommands();
    this.setupBotMenu();
    this.initializeSubscriptions();
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
   */
  private async setupBotMenu(): Promise<void> {
    try {
      // –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const baseCommands = [
        {
          command: "start",
          description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
        },
        {
          command: "search",
          description: "–ü–æ–∏—Å–∫ –≤—Å–µ—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞",
        },
        {
          command: "search_new",
          description: "–ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π",
        },
        {
          command: "get",
          description: "–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç",
        },
        {
          command: "help",
          description: "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º",
        },
        {
          command: "subscribe",
          description: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö",
        },
        {
          command: "unsubscribe",
          description: "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        },
      ];

      // –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
      const adminCommands = [
        {
          command: "admin_stats",
          description: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —Å–∏—Å—Ç–µ–º—ã",
        },
        {
          command: "admin_subscribers",
          description: "üë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
        },
        {
          command: "admin_broadcast",
          description: "üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π",
        },
        {
          command: "admin_unsubscribe",
          description: "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Chat ID",
        },
        {
          command: "admin_unsubscribe_all",
          description: "üóëÔ∏è –û—Ç–ø–∏—Å–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        },
        {
          command: "admin_search",
          description: "üîç –ü–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –≤ –ë–î",
        },
        {
          command: "admin_analytics",
          description: "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π",
        },
        {
          command: "admin_set_interval",
          description: "‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —á–∞—Å–∞—Ö)",
        },
      ];

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö
      await this.bot.setMyCommands(baseCommands);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
      if (ADMIN_CHAT_IDS.length > 0) {
        const allCommands = [...baseCommands, ...adminCommands];

        for (const adminId of ADMIN_CHAT_IDS) {
          try {
            await this.bot.setMyCommands(allCommands, {
              scope: { type: "chat", chat_id: adminId },
            });
          } catch (error) {
            logger.warn(
              `–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é –¥–ª—è ${adminId}:`,
              error
            );
          }
        }
      }

      logger.info("Telegram: –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ");
      logger.info(
        `Telegram: –ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è ${ADMIN_CHAT_IDS.length} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤`
      );
    } catch (error) {
      logger.error("Telegram: –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥:", error);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
   */
  private setupCommands(): void {
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
    this.bot.onText(/\/(admin_.*|confirm_.*)/, async (msg) => {
      if (!this.isAdmin(msg.from?.id)) {
        await this.sendAccessDeniedMessage(msg.chat.id);
        logger.warn(
          `–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–æ–º–∞–Ω–¥–µ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${
            msg.from?.id
          } (${msg.from?.username || "unknown"}): ${msg.text}`
        );
        return;
      }
      // –ï—Å–ª–∏ –∞–¥–º–∏–Ω - –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –Ω–∏–∂–µ
    });

    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      this.recordUserInteraction(
        chatId,
        "/start",
        msg.from?.username,
        msg.from?.first_name
      );

      const welcomeMessage = `
üîå *–ë–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞ –≤ —Ä–∞–π–æ–Ω–µ ${MY_PLACE}.

üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ (–∫–Ω–æ–ø–∫–∞ —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞) –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.

‚ú® –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.
`;

      await this.bot.sendMessage(chatId, welcomeMessage, {
        parse_mode: "Markdown",
      });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /search - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫
    this.bot.onText(/\/search$/, async (msg) => {
      await this.handleSearchCommand(msg, false);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /search_new - –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö
    this.bot.onText(/\/search_new/, async (msg) => {
      await this.handleSearchCommand(msg, true);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /get - –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç
    this.bot.onText(/\/get/, async (msg) => {
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      this.recordUserInteraction(
        msg.chat.id,
        "/get",
        msg.from?.username,
        msg.from?.first_name
      );
      await this.handleGetCommand(msg);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.onText(/\/help/, async (msg) => {
      const chatId = msg.chat.id;
      const isAdmin = this.isAdmin(msg.from?.id);

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      this.recordUserInteraction(
        chatId,
        "/help",
        msg.from?.username,
        msg.from?.first_name
      );

      let helpMessage = `
üìã *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*

**/search** - –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
‚Ä¢ –ò—â–µ—Ç –≤—Å–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è ${MY_PLACE}
‚Ä¢ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª

**/search\\_new** - –ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π  
‚Ä¢ –ò—â–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –±—É–¥—É—â–∏–µ
‚Ä¢ –§–∏–ª—å—Ç—Ä—É–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π

**/get** - –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç
‚Ä¢ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
‚Ä¢ –ï—Å–ª–∏ –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ—Ç - —Å–æ–æ–±—â–∞–µ—Ç –æ–± —ç—Ç–æ–º

**/subscribe** - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ ${this.subscriptionManager.getUpdateInterval()} —á–∞—Å${
        this.subscriptionManager.getUpdateInterval() === 1
          ? ""
          : this.subscriptionManager.getUpdateInterval() < 5
          ? "–∞"
          : "–æ–≤"
      }
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

**/unsubscribe** - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –û—Ç–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

**/help** - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
`;

      if (isAdmin) {
        helpMessage += `
üîß *–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:*

**/admin\\_stats** - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö
‚Ä¢ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ —Å–∏—Å—Ç–µ–º—ã

**/admin\\_subscribers** - –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
‚Ä¢ Chat ID, –∏–º–µ–Ω–∞, –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

**/admin\\_broadcast** - –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
‚Ä¢ –î–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏

**/admin\\_unsubscribe** - –û—Ç–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –û—Ç–ø–∏—Å–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Chat ID
‚Ä¢ –§–æ—Ä–º–∞—Ç: \`/admin_unsubscribe 123456789\`

**/admin\\_unsubscribe\\_all** - –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø–∏—Å–∫–∞
‚Ä¢ –û—Ç–ø–∏—Å–∞—Ç—å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
‚Ä¢ –î–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
‚Ä¢ –ù–µ–æ–±—Ä–∞—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è

**/admin\\_set\\_interval** - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π (1-24 —á–∞—Å–∞)
‚Ä¢ –§–æ—Ä–º–∞—Ç: \`/admin_set_interval [—á–∞—Å—ã]\`
‚Ä¢ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
`;
      }

      await this.bot.sendMessage(chatId, helpMessage, {
        parse_mode: "Markdown",
      });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /subscribe
    this.bot.onText(/\/subscribe|\/–ø–æ–¥–ø–∏—Å–∫–∞/, async (msg) => {
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      this.recordUserInteraction(
        msg.chat.id,
        "/subscribe",
        msg.from?.username,
        msg.from?.first_name
      );
      await this.handleSubscribeCommand(msg);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /unsubscribe
    this.bot.onText(/\/unsubscribe|\/–æ—Ç–ø–∏—Å–∫–∞/, async (msg) => {
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      this.recordUserInteraction(
        msg.chat.id,
        "/unsubscribe",
        msg.from?.username,
        msg.from?.first_name
      );
      await this.handleUnsubscribeCommand(msg);
    });

    // –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    this.bot.onText(/\/admin_stats/, async (msg) => {
      if (this.isAdmin(msg.from?.id)) {
        await this.handleAdminStatsCommand(msg);
      } else {
        await this.sendAccessDeniedMessage(msg.chat.id);
      }
    });

    this.bot.onText(/\/admin_subscribers/, async (msg) => {
      if (this.isAdmin(msg.from?.id)) {
        await this.handleAdminSubscribersCommand(msg);
      } else {
        await this.sendAccessDeniedMessage(msg.chat.id);
      }
    });

    this.bot.onText(/\/admin_broadcast/, async (msg) => {
      if (this.isAdmin(msg.from?.id)) {
        await this.handleAdminBroadcastCommand(msg);
      } else {
        await this.sendAccessDeniedMessage(msg.chat.id);
      }
    });

    this.bot.onText(/\/confirm_broadcast/, async (msg) => {
      if (this.isAdmin(msg.from?.id)) {
        await this.handleConfirmBroadcastCommand(msg);
      } else {
        await this.sendAccessDeniedMessage(msg.chat.id);
      }
    });

    this.bot.onText(/\/admin_unsubscribe/, async (msg) => {
      if (this.isAdmin(msg.from?.id)) {
        await this.handleAdminUnsubscribeCommand(msg);
      } else {
        await this.sendAccessDeniedMessage(msg.chat.id);
      }
    });

    this.bot.onText(/\/admin_unsubscribe_all/, async (msg) => {
      if (this.isAdmin(msg.from?.id)) {
        await this.handleAdminUnsubscribeAllCommand(msg);
      } else {
        await this.sendAccessDeniedMessage(msg.chat.id);
      }
    });

    this.bot.onText(/\/confirm_unsubscribe_all/, async (msg) => {
      if (this.isAdmin(msg.from?.id)) {
        await this.handleConfirmUnsubscribeAllCommand(msg);
      } else {
        await this.sendAccessDeniedMessage(msg.chat.id);
      }
    });

    this.bot.onText(/\/admin_set_interval/, async (msg) => {
      if (this.isAdmin(msg.from?.id)) {
        await this.handleAdminSetIntervalCommand(msg);
      } else {
        await this.sendAccessDeniedMessage(msg.chat.id);
      }
    });

    this.bot.onText(/\/admin_search/, async (msg) => {
      if (this.isAdmin(msg.from?.id)) {
        await this.handleAdminSearchCommand(msg);
      } else {
        await this.sendAccessDeniedMessage(msg.chat.id);
      }
    });

    this.bot.onText(/\/admin_analytics/, async (msg) => {
      if (this.isAdmin(msg.from?.id)) {
        await this.handleAdminAnalyticsCommand(msg);
      } else {
        await this.sendAccessDeniedMessage(msg.chat.id);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (inline –∫–Ω–æ–ø–∫–∏)
    this.bot.on("callback_query", async (callbackQuery) => {
      const msg = callbackQuery.message;
      const chatId = msg?.chat.id;
      const userId = callbackQuery.from.id;
      const data = callbackQuery.data;

      if (!chatId || !this.isAdmin(userId)) {
        await this.bot.answerCallbackQuery(callbackQuery.id, {
          text: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
          show_alert: true,
        });
        return;
      }

      try {
        if (data?.startsWith("unsubscribe_")) {
          const targetChatId = parseInt(data.replace("unsubscribe_", ""), 10);
          await this.handleInlineUnsubscribe(callbackQuery, targetChatId);
        } else {
          await this.bot.answerCallbackQuery(callbackQuery.id, {
            text: "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
          });
        }
      } catch (error) {
        logger.error("Telegram: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:", error);
        await this.bot.answerCallbackQuery(callbackQuery.id, {
          text: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
          show_alert: true,
        });
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∫–æ–º–∞–Ω–¥)
    this.bot.on("message", async (msg) => {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—ã—à–µ)
      if (msg.text?.startsWith("/")) {
        return;
      }

      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (
        msg.new_chat_members ||
        msg.left_chat_member ||
        msg.group_chat_created
      ) {
        return;
      }

      const chatId = msg.chat.id;
      const helpMessage = `
ü§ñ *Rosseti Parser Bot*

–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏\\. 

üìã –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
/help

‚ú® –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start \\- –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ /search \\- –ø–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞
‚Ä¢ /subscribe \\- –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ /unsubscribe \\- –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
`;

      await this.bot.sendMessage(chatId, helpMessage, {
        parse_mode: "MarkdownV2",
      });
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   */
  private isAdmin(userId?: number): boolean {
    if (!userId) return false;

    return ADMIN_CHAT_IDS.includes(userId);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
   */
  private async sendAccessDeniedMessage(chatId: number): Promise<void> {
    const message = `
üö´ **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω**

‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.

üí° **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
‚Ä¢ /search - –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
‚Ä¢ /search_new - –ø–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
‚Ä¢ /get - –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç
‚Ä¢ /subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ /unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

üìû –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.
`;

    await this.bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
  }

  /**
   * –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  private async handleAdminStatsCommand(
    msg: TelegramBot.Message
  ): Promise<void> {
    const chatId = msg.chat.id;

    try {
      logger.info(`Admin: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∞ ${msg.from?.id}`);

      const stats = this.subscriptionManager.getStats();
      const { lastResults } = this.subscriptionManager.getLastCheckInfo();

      const message = `
üìä *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üë• **–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${stats.totalSubscribers}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.activeSubscribers}
‚Ä¢ –û—Ç–ø–∏—Å–∞–≤—à–∏—Ö—Å—è: ${stats.totalSubscribers - stats.activeSubscribers}

üîç **–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:**
‚Ä¢ –í—Ä–µ–º—è: ${
        stats.lastCheck
          ? formatDateForDisplay(stats.lastCheck)
          : "–ù–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å"
      }
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π: ${stats.lastResultsCount}
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö: ${lastResults.length}

ü§ñ **–°–∏—Å—Ç–µ–º–∞:**
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
‚Ä¢ –†–µ–≥–∏–æ–Ω: ${MY_PLACE}
‚Ä¢ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: ${this.isRunning() ? "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" : "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
`;

      await this.bot.sendMessage(chatId, message, {
        parse_mode: "Markdown",
      });
    } catch (error) {
      logger.error("Admin: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
      await this.bot.sendMessage(
        chatId,
        `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${(error as Error).message}`,
        { parse_mode: "Markdown" }
      );
    }
  }

  /**
   * –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞: —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
   */
  private async handleAdminSubscribersCommand(
    msg: TelegramBot.Message
  ): Promise<void> {
    const chatId = msg.chat.id;

    try {
      logger.info(`Admin: –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∞ ${msg.from?.id}`);

      const subscribers = this.subscriptionManager.getSubscribers();

      if (subscribers.length === 0) {
        await this.bot.sendMessage(
          chatId,
          "üìù *–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—É—Å—Ç*\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.",
          { parse_mode: "Markdown" }
        );
        return;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ—Ä—Ü–∏—è–º–∏ –ø–æ 5 —Å –∫–Ω–æ–ø–∫–∞–º–∏
      const pageSize = 5;
      const totalPages = Math.ceil(subscribers.length / pageSize);

      for (let page = 0; page < totalPages; page++) {
        const start = page * pageSize;
        const end = start + pageSize;
        const pageSubscribers = subscribers.slice(start, end);

        const { text, keyboard } = this.createSubscribersMessageWithButtons(
          pageSubscribers,
          page + 1,
          totalPages,
          start
        );

        await this.bot.sendMessage(chatId, text, {
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: keyboard,
          },
        });

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if (page < totalPages - 1) {
          await new Promise((resolve) => setTimeout(resolve, 800));
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const statsMessage = `
üìä **–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:**

üë• –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: **${subscribers.length}**
üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${formatDateForDisplay(new Date())}

üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø–∏—Å–∫–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`/admin_unsubscribe <Chat_ID>\` –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—Ç–ø–∏—Å–∫–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`/admin_unsubscribe_all\` –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø–∏—Å–∫–∏
`;

      await this.bot.sendMessage(chatId, statsMessage, {
        parse_mode: "Markdown",
      });
    } catch (error) {
      logger.error("Admin: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:", error);
      await this.bot.sendMessage(
        chatId,
        `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${(error as Error).message}`,
        { parse_mode: "Markdown" }
      );
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
   */
  private createSubscribersMessageWithButtons(
    subscribers: Array<{
      chatId: number;
      username?: string | undefined;
      firstName?: string | undefined;
      subscribedAt: Date;
      lastNotified?: Date | undefined;
    }>,
    page: number,
    totalPages: number,
    startIndex: number = 0
  ): { text: string; keyboard: TelegramBot.InlineKeyboardButton[][] } {
    let message = `üìù *–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤* (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}/${totalPages})\n\n`;

    const keyboard: TelegramBot.InlineKeyboardButton[][] = [];

    subscribers.forEach((sub, index) => {
      const globalIndex = startIndex + index + 1;
      const username = sub.username ? `@${sub.username}` : "–Ω–µ—Ç username";
      const firstName = sub.firstName || "–Ω–µ—Ç –∏–º–µ–Ω–∏";
      const subscribedDate = formatDateForDisplay(sub.subscribedAt);
      const lastNotified = sub.lastNotified
        ? formatDateForDisplay(sub.lastNotified)
        : "–Ω–∏–∫–æ–≥–¥–∞";

      // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Markdown
      const safeFirstName = escapeMarkdown(firstName);
      const safeUsername = escapeMarkdown(username);
      const safeSubscribedDate = escapeMarkdown(subscribedDate);
      const safeLastNotified = escapeMarkdown(lastNotified);

      // –¢–µ–∫—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      message += `${globalIndex}\\. **${safeFirstName}** \\(${safeUsername}\\)\n`;
      message += `   üí¨ Chat ID: \`${sub.chatId}\`\n`;
      message += `   üìÖ –ü–æ–¥–ø–∏—Å–∞–Ω: ${safeSubscribedDate}\n`;
      message += `   üîî –ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${safeLastNotified}\n\n`;

      // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ (–≤ –∫–Ω–æ–ø–∫–∞—Ö —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ)
      const buttonText = `‚ùå ${firstName} (${sub.chatId})`;
      const callbackData = `unsubscribe_${sub.chatId}`;

      keyboard.push([
        {
          text: buttonText,
          callback_data: callbackData,
        },
      ]);
    });

    message += `\nüîΩ **–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**`;

    return { text: message, keyboard };
  }

  /**
   * –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞: –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
   */
  private async handleAdminBroadcastCommand(
    msg: TelegramBot.Message
  ): Promise<void> {
    const chatId = msg.chat.id;

    try {
      const message = `
üì¢ *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞*

–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
\`/admin_broadcast <–≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ>\`

**–ü—Ä–∏–º–µ—Ä:**
\`/admin_broadcast –í–Ω–∏–º–∞–Ω–∏–µ! –ó–∞–≤—Ç—Ä–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –º–∞—Å—à—Ç–∞–±–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞.\`

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–ï–ú –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º (${
        this.subscriptionManager.getStats().activeSubscribers
      } —á–µ–ª.).
`;

      await this.bot.sendMessage(chatId, message, {
        parse_mode: "Markdown",
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
      const text = msg.text?.replace(/^\/admin_broadcast\s*/, "").trim();

      if (text && text.length > 0) {
        await this.performBroadcast(chatId, text);
      }
    } catch (error) {
      logger.error("Admin: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã —Ä–∞—Å—Å—ã–ª–∫–∏:", error);
      await this.bot.sendMessage(
        chatId,
        `‚ùå –û—à–∏–±–∫–∞: ${(error as Error).message}`,
        { parse_mode: "Markdown" }
      );
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
   */
  private async performBroadcast(
    adminChatId: number,
    message: string
  ): Promise<void> {
    try {
      const subscribers = this.subscriptionManager.getSubscribers();

      if (subscribers.length === 0) {
        await this.bot.sendMessage(
          adminChatId,
          "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
          { parse_mode: "Markdown" }
        );
        return;
      }

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
      const confirmMessage = `
üö® **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –†–ê–°–°–´–õ–ö–ò**

üìù **–°–æ–æ–±—â–µ–Ω–∏–µ:**
${message}

üë• **–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:** ${subscribers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤

‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º?
–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: \`/confirm_broadcast\`
`;

      await this.bot.sendMessage(adminChatId, confirmMessage, {
        parse_mode: "Markdown",
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      this.pendingBroadcast = {
        message,
        adminChatId,
        timestamp: Date.now(),
      };

      // –£–¥–∞–ª—è–µ–º pending broadcast —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
      setTimeout(() => {
        if (
          this.pendingBroadcast &&
          this.pendingBroadcast.timestamp === this.pendingBroadcast.timestamp
        ) {
          this.pendingBroadcast = undefined;
        }
      }, 5 * 60 * 1000);
    } catch (error) {
      logger.error("Admin: –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:", error);
      throw error;
    }
  }

  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
   */
  private async handleConfirmBroadcastCommand(
    msg: TelegramBot.Message
  ): Promise<void> {
    const chatId = msg.chat.id;

    try {
      if (!this.pendingBroadcast) {
        await this.bot.sendMessage(
          chatId,
          "‚ùå –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
          { parse_mode: "Markdown" }
        );
        return;
      }

      if (this.pendingBroadcast.adminChatId !== chatId) {
        await this.bot.sendMessage(
          chatId,
          "‚ùå –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.",
          { parse_mode: "Markdown" }
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç—ë–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (5 –º–∏–Ω—É—Ç)
      const now = Date.now();
      const age = now - this.pendingBroadcast.timestamp;
      if (age > 5 * 60 * 1000) {
        this.pendingBroadcast = undefined;
        await this.bot.sendMessage(
          chatId,
          "‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ (5 –º–∏–Ω—É—Ç). –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ä–∞—Å—Å—ã–ª–∫–∏.",
          { parse_mode: "Markdown" }
        );
        return;
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
      const { message } = this.pendingBroadcast;
      this.pendingBroadcast = undefined;

      await this.executeBroadcast(chatId, message);
    } catch (error) {
      logger.error("Admin: –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏:", error);
      await this.bot.sendMessage(
        chatId,
        `‚ùå –û—à–∏–±–∫–∞: ${(error as Error).message}`,
        { parse_mode: "Markdown" }
      );
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
   */
  private async executeBroadcast(
    adminChatId: number,
    message: string
  ): Promise<void> {
    try {
      const subscribers = this.subscriptionManager.getSubscribers();

      await this.bot.sendMessage(
        adminChatId,
        `üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è ${subscribers.length} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º...`,
        { parse_mode: "Markdown" }
      );

      let successCount = 0;
      let errorCount = 0;

      // –†–∞—Å—Å—ã–ª–∞–µ–º —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
      for (let i = 0; i < subscribers.length; i++) {
        const subscriber = subscribers[i];

        if (!subscriber) {
          continue;
        }

        try {
          await this.bot.sendMessage(
            subscriber.chatId,
            `üì¢ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n${message}`,
            { parse_mode: "Markdown" }
          );

          successCount++;

          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          await this.subscriptionManager.updateLastNotified(subscriber.chatId);
        } catch (error) {
          errorCount++;
          logger.warn(
            `Admin: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${subscriber.chatId}:`,
            error
          );
        }

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É - –ª–∏–º–∏—Ç Telegram)
        if (i < subscribers.length - 1) {
          await new Promise((resolve) => setTimeout(resolve, 35));
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        if ((i + 1) % 10 === 0) {
          await this.bot.sendMessage(
            adminChatId,
            `üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${i + 1}/${
              subscribers.length
            } (‚úÖ ${successCount}, ‚ùå ${errorCount})`,
            { parse_mode: "Markdown" }
          );
        }
      }

      // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
      const finalMessage = `
‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${subscribers.length}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${successCount}
‚Ä¢ –û—à–∏–±–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: ${errorCount}
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${Math.round((successCount / subscribers.length) * 100)}%

${
  errorCount > 0
    ? "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞)."
    : "üéâ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã!"
}
`;

      await this.bot.sendMessage(adminChatId, finalMessage, {
        parse_mode: "Markdown",
      });

      logger.info(
        `Admin: –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${successCount}, –æ—à–∏–±–æ–∫: ${errorCount}`
      );
    } catch (error) {
      logger.error("Admin: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏:", error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –æ—Ç–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ callback
   */
  private async handleInlineUnsubscribe(
    callbackQuery: TelegramBot.CallbackQuery,
    targetChatId: number
  ): Promise<void> {
    const chatId = callbackQuery.message?.chat.id;

    if (!chatId) {
      await this.bot.answerCallbackQuery(callbackQuery.id, {
        text: "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞",
      });
      return;
    }

    try {
      logger.info(
        `Admin: Inline –æ—Ç–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetChatId} –æ—Ç –∞–¥–º–∏–Ω–∞ ${callbackQuery.from.id}`
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫
      const subscribers = this.subscriptionManager.getSubscribers();
      const targetSubscriber = subscribers.find(
        (sub) => sub.chatId === targetChatId
      );

      if (!targetSubscriber) {
        await this.bot.answerCallbackQuery(callbackQuery.id, {
          text: `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetChatId} –Ω–µ –Ω–∞–π–¥–µ–Ω`,
          show_alert: true,
        });
        return;
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–ø–∏—Å–∫—É
      const success = await this.subscriptionManager.unsubscribe(targetChatId);

      if (success) {
        const username = targetSubscriber.username
          ? `@${targetSubscriber.username}`
          : "–Ω–µ—Ç username";
        const firstName = targetSubscriber.firstName || "–Ω–µ—Ç –∏–º–µ–Ω–∏";

        // –û—Ç–≤–µ—Ç –Ω–∞ callback
        await this.bot.answerCallbackQuery(callbackQuery.id, {
          text: `‚úÖ ${firstName} –æ—Ç–ø–∏—Å–∞–Ω`,
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.updateSubscribersMessage(
          chatId,
          callbackQuery.message?.message_id
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const confirmMessage = `
‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–Ω —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É**

üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ò–º—è: ${firstName}
‚Ä¢ Username: ${username}
‚Ä¢ Chat ID: \`${targetChatId}\`

üìß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
`;

        await this.bot.sendMessage(chatId, confirmMessage, {
          parse_mode: "Markdown",
        });

        logger.info(
          `Admin: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetChatId} –æ—Ç–ø–∏—Å–∞–Ω —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–æ–º ${callbackQuery.from.id}`
        );
      } else {
        await this.bot.answerCallbackQuery(callbackQuery.id, {
          text: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`,
          show_alert: true,
        });
      }
    } catch (error) {
      logger.error("Admin: –û—à–∏–±–∫–∞ inline –æ—Ç–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      await this.bot.answerCallbackQuery(callbackQuery.id, {
        text: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ",
        show_alert: true,
      });
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
   */
  private async updateSubscribersMessage(
    chatId: number,
    messageId?: number
  ): Promise<void> {
    if (!messageId) return;

    try {
      const subscribers = this.subscriptionManager.getSubscribers();

      if (subscribers.length === 0) {
        await this.bot.editMessageText(
          "üìù *–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—É—Å—Ç*\n\n–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç–ø–∏—Å–∞–Ω—ã.",
          {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: "Markdown",
          }
        );
        return;
      }

      // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç –∫–Ω–æ–ø–æ–∫)
      const displaySubscribers = subscribers.slice(0, 5);
      const { text, keyboard } = this.createSubscribersMessageWithButtons(
        displaySubscribers,
        1,
        1
      );

      await this.bot.editMessageText(text, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: keyboard,
        },
      });
    } catch (error) {
      logger.error("Admin: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:", error);
    }
  }

  /**
   * –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞: –æ—Ç–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Chat ID
   */
  private async handleAdminUnsubscribeCommand(
    msg: TelegramBot.Message
  ): Promise<void> {
    const chatId = msg.chat.id;

    try {
      logger.info(`Admin: –ó–∞–ø—Ä–æ—Å –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∞ ${msg.from?.id}`);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º Chat ID –∏–∑ –∫–æ–º–∞–Ω–¥—ã
      const text = msg.text || "";
      const match = text.match(/\/admin_unsubscribe\s+(\d+)/);

      if (!match || !match[1]) {
        const helpMessage = `
‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã*

üìù **–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**
\`/admin_unsubscribe <Chat_ID>\`

**–ü—Ä–∏–º–µ—Ä:**
\`/admin_unsubscribe 123456789\`

üí° **–ö–∞–∫ –Ω–∞–π—Ç–∏ Chat ID:**
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (/admin_subscribers)
‚Ä¢ Chat ID —É–∫–∞–∑–∞–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!
`;

        await this.bot.sendMessage(chatId, helpMessage, {
          parse_mode: "Markdown",
        });
        return;
      }

      const targetChatId = parseInt(match[1], 10);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫
      const subscribers = this.subscriptionManager.getSubscribers();
      const targetSubscriber = subscribers.find(
        (sub) => sub.chatId === targetChatId
      );

      if (!targetSubscriber) {
        await this.bot.sendMessage(
          chatId,
          `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Chat ID \`${targetChatId}\` –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.`,
          { parse_mode: "Markdown" }
        );
        return;
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–ø–∏—Å–∫—É
      const success = await this.subscriptionManager.unsubscribe(targetChatId);

      if (success) {
        const username = targetSubscriber.username
          ? `@${targetSubscriber.username}`
          : "–Ω–µ—Ç username";
        const firstName = targetSubscriber.firstName || "–Ω–µ—Ç –∏–º–µ–Ω–∏";

        const successMessage = `
‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω**

üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ò–º—è: ${firstName}
‚Ä¢ Username: ${username}
‚Ä¢ Chat ID: \`${targetChatId}\`
‚Ä¢ –î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏: ${formatDateForDisplay(targetSubscriber.subscribedAt)}

üìß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
`;

        await this.bot.sendMessage(chatId, successMessage, {
          parse_mode: "Markdown",
        });

        logger.info(
          `Admin: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetChatId} –æ—Ç–ø–∏—Å–∞–Ω –∞–¥–º–∏–Ω–æ–º ${msg.from?.id}`
        );
      } else {
        await this.bot.sendMessage(
          chatId,
          `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \`${targetChatId}\`. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª –æ—Ç–ø–∏—Å–∞–Ω.`,
          { parse_mode: "Markdown" }
        );
      }
    } catch (error) {
      logger.error("Admin: –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      await this.bot.sendMessage(
        chatId,
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${(error as Error).message}`,
        { parse_mode: "Markdown" }
      );
    }
  }

  /**
   * –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞: –º–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  private async handleAdminUnsubscribeAllCommand(
    msg: TelegramBot.Message
  ): Promise<void> {
    const chatId = msg.chat.id;

    try {
      logger.info(`Admin: –ó–∞–ø—Ä–æ—Å –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∞ ${msg.from?.id}`);

      const subscribers = this.subscriptionManager.getSubscribers();

      if (subscribers.length === 0) {
        await this.bot.sendMessage(
          chatId,
          "üìù *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤*\n\n–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —É–∂–µ –ø—É—Å—Ç.",
          { parse_mode: "Markdown" }
        );
        return;
      }

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø–∏—Å–∫–∏
      const confirmMessage = `
üö® **–ú–ê–°–°–û–í–ê–Ø –û–¢–ü–ò–°–ö–ê - –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï**

‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï! –û–ü–ê–°–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø!**

üìä **–ë—É–¥—É—Ç –æ—Ç–ø–∏—Å–∞–Ω—ã:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${subscribers.length}
‚Ä¢ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ª–∏—à–∞—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏—è **–ù–ï–û–ë–†–ê–¢–ò–ú–ê**

üî¥ **–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è:**
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ë–î
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–µ–∫—Ä–∞—Ç—è—Ç—Å—è

‚ùì –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å **–í–°–ï–•** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?

–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: \`/confirm_unsubscribe_all\`
–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 5 –º–∏–Ω—É—Ç
`;

      await this.bot.sendMessage(chatId, confirmMessage, {
        parse_mode: "Markdown",
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      this.pendingUnsubscribeAll = {
        adminChatId: chatId,
        timestamp: Date.now(),
        subscriberCount: subscribers.length,
      };

      // –£–¥–∞–ª—è–µ–º pending unsubscribe —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
      setTimeout(() => {
        if (
          this.pendingUnsubscribeAll &&
          this.pendingUnsubscribeAll.timestamp ===
            this.pendingUnsubscribeAll.timestamp
        ) {
          this.pendingUnsubscribeAll = undefined;
        }
      }, 5 * 60 * 1000);
    } catch (error) {
      logger.error("Admin: –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø–∏—Å–∫–∏:", error);
      await this.bot.sendMessage(
        chatId,
        `‚ùå –û—à–∏–±–∫–∞: ${(error as Error).message}`,
        { parse_mode: "Markdown" }
      );
    }
  }

  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø–∏—Å–∫–∏
   */
  private async handleConfirmUnsubscribeAllCommand(
    msg: TelegramBot.Message
  ): Promise<void> {
    const chatId = msg.chat.id;

    try {
      if (!this.pendingUnsubscribeAll) {
        await this.bot.sendMessage(
          chatId,
          "‚ùå –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –º–∞—Å—Å–æ–≤—ã—Ö –æ—Ç–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
          { parse_mode: "Markdown" }
        );
        return;
      }

      if (this.pendingUnsubscribeAll.adminChatId !== chatId) {
        await this.bot.sendMessage(
          chatId,
          "‚ùå –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.",
          { parse_mode: "Markdown" }
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç—ë–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (5 –º–∏–Ω—É—Ç)
      const now = Date.now();
      const age = now - this.pendingUnsubscribeAll.timestamp;
      if (age > 5 * 60 * 1000) {
        this.pendingUnsubscribeAll = undefined;
        await this.bot.sendMessage(
          chatId,
          "‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ (5 –º–∏–Ω—É—Ç). –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.",
          { parse_mode: "Markdown" }
        );
        return;
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–æ–≤—É—é –æ—Ç–ø–∏—Å–∫—É
      const { subscriberCount } = this.pendingUnsubscribeAll;
      this.pendingUnsubscribeAll = undefined;

      await this.executeUnsubscribeAll(chatId, subscriberCount);
    } catch (error) {
      logger.error("Admin: –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø–∏—Å–∫–∏:", error);
      await this.bot.sendMessage(
        chatId,
        `‚ùå –û—à–∏–±–∫–∞: ${(error as Error).message}`,
        { parse_mode: "Markdown" }
      );
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø–∏—Å–∫–∏
   */
  private async executeUnsubscribeAll(
    adminChatId: number,
    expectedCount: number
  ): Promise<void> {
    try {
      const subscribers = this.subscriptionManager.getSubscribers();

      await this.bot.sendMessage(
        adminChatId,
        `üöÄ –ù–∞—á–∏–Ω–∞—é –º–∞—Å—Å–æ–≤—É—é –æ—Ç–ø–∏—Å–∫—É ${subscribers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`,
        { parse_mode: "Markdown" }
      );

      let successCount = 0;
      let errorCount = 0;

      // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      for (let i = 0; i < subscribers.length; i++) {
        const subscriber = subscribers[i];

        if (!subscriber) {
          continue;
        }

        try {
          const success = await this.subscriptionManager.unsubscribe(
            subscriber.chatId
          );

          if (success) {
            successCount++;
          } else {
            errorCount++;
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 –æ–ø–µ—Ä–∞—Ü–∏–π
          if ((i + 1) % 5 === 0) {
            await this.bot.sendMessage(
              adminChatId,
              `üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${i + 1}/${
                subscribers.length
              } (‚úÖ ${successCount}, ‚ùå ${errorCount})`,
              { parse_mode: "Markdown" }
            );
          }
        } catch (error) {
          errorCount++;
          logger.warn(
            `Admin: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${subscriber.chatId}:`,
            error
          );
        }
      }

      // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
      const finalMessage = `
‚úÖ **–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –û–∂–∏–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–æ–∫: ${expectedCount}
‚Ä¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${subscribers.length}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω–æ: ${successCount}
‚Ä¢ –û—à–∏–±–∫–∏: ${errorCount}
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${Math.round((successCount / subscribers.length) * 100)}%

${
  errorCount > 0
    ? "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –±—ã–ª–∏ –æ—Ç–ø–∏—Å–∞–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫."
    : "üéâ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω—ã!"
}

üìù **–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ:**
‚Ä¢ –í—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –≤ –ë–î
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω—ã
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /subscribe
`;

      await this.bot.sendMessage(adminChatId, finalMessage, {
        parse_mode: "Markdown",
      });

      logger.info(
        `Admin: –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${successCount}, –æ—à–∏–±–æ–∫: ${errorCount}`
      );
    } catch (error) {
      logger.error("Admin: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø–∏—Å–∫–∏:", error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ /admin_set_interval
   */
  private async handleAdminSetIntervalCommand(
    msg: TelegramBot.Message
  ): Promise<void> {
    const chatId = msg.chat.id;
    const text = msg.text || "";

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã
      const match = text.match(/\/admin_set_interval\s+(\d+)/);

      if (!match) {
        const currentInterval = this.subscriptionManager.getUpdateInterval();

        const helpMessage = `
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è*

üìã **–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:** ${currentInterval} —á–∞—Å${
          currentInterval === 1 ? "" : currentInterval < 5 ? "–∞" : "–æ–≤"
        }

üìù **–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:**
\`/admin_set_interval [—á–∞—Å—ã]\`

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ \`/admin_set_interval 3\` - –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
‚Ä¢ \`/admin_set_interval 12\` - –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤
‚Ä¢ \`/admin_set_interval 1\` - –∫–∞–∂–¥—ã–π —á–∞—Å

‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:** –æ—Ç 1 –¥–æ 24 —á–∞—Å–æ–≤
üì¢ **–í–Ω–∏–º–∞–Ω–∏–µ:** –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
`;

        await this.bot.sendMessage(chatId, helpMessage, {
          parse_mode: "Markdown",
        });
        return;
      }

      const newInterval = parseInt(match[1]!, 10);
      const currentInterval = this.subscriptionManager.getUpdateInterval();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
      if (newInterval < 1 || newInterval > 24) {
        await this.bot.sendMessage(
          chatId,
          "‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 24 —á–∞—Å–æ–≤",
          { parse_mode: "Markdown" }
        );
        return;
      }

      // –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (newInterval === currentInterval) {
        await this.bot.sendMessage(
          chatId,
          `‚ÑπÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${newInterval} —á–∞—Å${
            newInterval === 1 ? "" : newInterval < 5 ? "–∞" : "–æ–≤"
          }`,
          { parse_mode: "Markdown" }
        );
        return;
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
      this.subscriptionManager.setUpdateInterval(newInterval);

      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
      this.restartNotificationChecker();

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—Ö–µ
      const adminMessage = `
‚úÖ *–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω!*

üïê **–°—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:** ${currentInterval} —á–∞—Å${
        currentInterval === 1 ? "" : currentInterval < 5 ? "–∞" : "–æ–≤"
      }
üïê **–ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:** ${newInterval} —á–∞—Å${
        newInterval === 1 ? "" : newInterval < 5 ? "–∞" : "–æ–≤"
      }

üì¢ –í—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —á–µ—Ä–µ–∑ ${newInterval} —á–∞—Å${
        newInterval === 1 ? "" : newInterval < 5 ? "–∞" : "–æ–≤"
      }
`;

      await this.bot.sendMessage(chatId, adminMessage, {
        parse_mode: "Markdown",
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
      await this.notifyUsersAboutIntervalChange(newInterval, currentInterval);
    } catch (error) {
      logger.error("Admin: –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:", error);
      await this.bot.sendMessage(
        chatId,
        `‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: ${(error as Error).message}`,
        { parse_mode: "Markdown" }
      );
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
   */
  private async notifyUsersAboutIntervalChange(
    newInterval: number,
    oldInterval: number
  ): Promise<void> {
    try {
      const subscribers = this.subscriptionManager.getSubscribers();

      if (subscribers.length === 0) {
        logger.info(
          "Admin: –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"
        );
        return;
      }

      const userMessage = `
üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

‚è∞ **–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω:**
‚Ä¢ –ë—ã–ª–æ: –∫–∞–∂–¥—ã–µ ${oldInterval} —á–∞—Å${
        oldInterval === 1 ? "" : oldInterval < 5 ? "–∞" : "–æ–≤"
      }
‚Ä¢ –°—Ç–∞–ª–æ: –∫–∞–∂–¥—ã–µ ${newInterval} —á–∞—Å${
        newInterval === 1 ? "" : newInterval < 5 ? "–∞" : "–æ–≤"
      }

üì± –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö –∫–∞–∂–¥—ã–µ ${newInterval} —á–∞—Å${
        newInterval === 1 ? "" : newInterval < 5 ? "–∞" : "–æ–≤"
      }.

üîï –î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsubscribe
`;

      let successCount = 0;
      let errorCount = 0;

      for (const subscriber of subscribers) {
        try {
          await this.bot.sendMessage(subscriber.chatId, userMessage, {
            parse_mode: "Markdown",
          });
          successCount++;
        } catch (error) {
          errorCount++;
          logger.warn(
            `Admin: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${subscriber.chatId}:`,
            error
          );
        }
      }

      logger.info(
        `Admin: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –£—Å–ø–µ—à–Ω–æ: ${successCount}, –æ—à–∏–±–æ–∫: ${errorCount}`
      );

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
      const adminNotification = `
üì¢ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã*

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${subscribers.length}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}
‚Ä¢ –û—à–∏–±–∫–∏: ${errorCount}
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${Math.round((successCount / subscribers.length) * 100)}%
`;

      await this.notifyAdmins(adminNotification);
    } catch (error) {
      logger.error(
        "Admin: –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:",
        error
      );
    }
  }

  /**
   * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
   */
  private restartNotificationChecker(): void {
    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä
      this.stopNotificationChecker();

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
      this.startNotificationChecker();

      logger.info(
        "Admin: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º"
      );
    } catch (error) {
      logger.error("Admin: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:", error);
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫
   */
  private async initializeSubscriptions(): Promise<void> {
    try {
      await this.subscriptionManager.initialize();
      this.startNotificationChecker();
      logger.info("Telegram: –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
    } catch (error) {
      logger.error("Telegram: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫:", error);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
   */
  private startNotificationChecker(): void {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const intervalHours = this.subscriptionManager.getUpdateInterval();
    const INTERVAL_MS = intervalHours * 60 * 60 * 1000;

    this.notificationInterval = setInterval(async () => {
      await this.checkForNewOutagesAndNotify();
    }, INTERVAL_MS);

    logger.info(
      `Telegram: –ó–∞–ø—É—â–µ–Ω —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π (–∫–∞–∂–¥—ã–µ ${intervalHours} —á–∞—Å${
        intervalHours === 1 ? "" : intervalHours < 5 ? "–∞" : "–æ–≤"
      })`
    );
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  private stopNotificationChecker(): void {
    if (this.notificationInterval) {
      clearInterval(this.notificationInterval);
      this.notificationInterval = undefined;
      logger.info("Telegram: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π");
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  private async checkForNewOutagesAndNotify(): Promise<void> {
    try {
      logger.info("Telegram: –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π");

      const subscribers = this.subscriptionManager.getSubscribers();
      if (subscribers.length === 0) {
        logger.info("Telegram: –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É");
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
      const outages = await getPowerOutagesQuick(30);
      const newOutages = filterValidOutages(outages);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)
      const hasNewOutages = this.subscriptionManager.hasNewResults(newOutages);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
      await this.subscriptionManager.updateLastCheck(newOutages);

      if (hasNewOutages && newOutages.length > 0) {
        logger.info(
          `Telegram: –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è (${newOutages.length}), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /get
        try {
          const reportPath = await saveReport(
            newOutages,
            `subscription-report-${Date.now()}`
          );
          logger.info(`Telegram: –°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç—á–µ—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ: ${reportPath}`);
        } catch (error) {
          logger.error(
            "Telegram: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ:",
            error
          );
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        for (const subscriber of subscribers) {
          await this.sendNotificationToSubscriber(
            subscriber.chatId,
            newOutages
          );
        }
      } else {
        logger.info("Telegram: –ù–æ–≤—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
      }
    } catch (error) {
      logger.error("Telegram: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π:", error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫—É
   */
  private async sendNotificationToSubscriber(
    chatId: number,
    outages: PowerOutageInfo[]
  ): Promise<void> {
    try {
      // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
      const notificationMessage = `
üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö*

üìç –ú–µ—Å—Ç–æ: ${MY_PLACE}
üìä –ù–∞–π–¥–µ–Ω–æ: ${outages.length} ${
        outages.length === 1 ? "–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ" : "–æ—Ç–∫–ª—é—á–µ–Ω–∏–π"
      }
üìÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${formatDateForDisplay(new Date())}

–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /get –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.
`;

      await this.bot.sendMessage(chatId, notificationMessage, {
        parse_mode: "Markdown",
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è–º (–∫–∞–∫ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö search)
      if (outages.length > 0) {
        const summary = this.createOutagesSummary(outages, true);
        await this.bot.sendMessage(chatId, summary, {
          parse_mode: "Markdown",
        });
      }

      await this.subscriptionManager.updateLastNotified(chatId);
      logger.info(
        `Telegram: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫—É ${chatId} —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö`
      );
    } catch (error) {
      logger.error(
        `Telegram: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫—É ${chatId}:`,
        error
      );
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
   */
  private async notifyAdmins(message: string): Promise<void> {
    for (const adminChatId of ADMIN_CHAT_IDS) {
      try {
        await this.bot.sendMessage(adminChatId, message, {
          parse_mode: "Markdown",
        });
      } catch (error) {
        logger.error(
          `Telegram: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É ${adminChatId}:`,
          error
        );
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /subscribe
   */
  private async handleSubscribeCommand(
    msg: TelegramBot.Message
  ): Promise<void> {
    const chatId = msg.chat.id;
    const username = msg.from?.username;
    const firstName = msg.from?.first_name;

    try {
      logger.info(
        `Telegram: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} (@${
          username || "unknown"
        })`
      );

      const success = await this.subscriptionManager.subscribe(
        chatId,
        username,
        firstName
      );

      if (success) {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const intervalHours = this.subscriptionManager.getUpdateInterval();

        const message = `
‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!*

üîî –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö –≤ —Ä–∞–π–æ–Ω–µ ${MY_PLACE}.

‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–µ ${intervalHours} —á–∞—Å${
          intervalHours === 1 ? "" : intervalHours < 5 ? "–∞" : "–æ–≤"
        }.
üì≤ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /unsubscribe
`;

        await this.bot.sendMessage(chatId, message, {
          parse_mode: "Markdown",
        });

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–µ
        const adminNotification = `
üÜï *–ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫!*

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${firstName || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"} ${
          username ? `(@${username})` : ""
        }
üÜî Chat ID: \`${chatId}\`
‚è∞ –í—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏: ${new Date().toLocaleString("ru-RU", {
          timeZone: "Europe/Moscow",
        })}

üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${
          this.subscriptionManager.getSubscribers().length
        }
`;

        await this.notifyAdmins(adminNotification);
      } else {
        await this.bot.sendMessage(
          chatId,
          "‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö.",
          { parse_mode: "Markdown" }
        );
      }
    } catch (error) {
      logger.error("Telegram: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", error);

      await this.bot.sendMessage(
        chatId,
        `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\`${
          (error as Error).message
        }\``,
        { parse_mode: "Markdown" }
      );
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unsubscribe
   */
  private async handleUnsubscribeCommand(
    msg: TelegramBot.Message
  ): Promise<void> {
    const chatId = msg.chat.id;

    try {
      logger.info(`Telegram: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);

      const success = await this.subscriptionManager.unsubscribe(chatId);

      if (success) {
        const message = `
‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞*

üîï –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö.

–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe
`;

        await this.bot.sendMessage(chatId, message, {
          parse_mode: "Markdown",
        });
      } else {
        await this.bot.sendMessage(
          chatId,
          "‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
          { parse_mode: "Markdown" }
        );
      }
    } catch (error) {
      logger.error("Telegram: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ:", error);

      await this.bot.sendMessage(
        chatId,
        `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ:\n\`${(error as Error).message}\``,
        { parse_mode: "Markdown" }
      );
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /get
   */
  private async handleGetCommand(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id;

    try {
      logger.info(
        `Telegram: –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${
          msg.from?.username || msg.from?.id
        }`
      );

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ—Ç—á–µ—Ç–µ
      const reportInfo = await getLatestReportInfo();

      if (!reportInfo) {
        await this.bot.sendMessage(
          chatId,
          "üìÑ –û—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search –∏–ª–∏ /search\\_new –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞.",
          { parse_mode: "Markdown" }
        );
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—á–µ—Ç–µ
      const infoMessage = `
üìÑ *–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç –Ω–∞–π–¥–µ–Ω*

üìã –§–∞–π–ª: \`${reportInfo.name}\`
üìÖ –°–æ–∑–¥–∞–Ω: ${formatDateForDisplay(reportInfo.createdAt)}
üìä –†–∞–∑–º–µ—Ä: ${Math.round(reportInfo.size / 1024)} –ö–ë

–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...
`;

      await this.bot.sendMessage(chatId, infoMessage, {
        parse_mode: "Markdown",
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞
      await this.bot.sendDocument(chatId, reportInfo.path, {
        caption: `üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö`,
      });

      logger.info(`Telegram: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á–µ—Ç ${reportInfo.name}`);
    } catch (error) {
      logger.error("Telegram: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:", error);

      await this.bot.sendMessage(
        chatId,
        `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:\n\`${
          (error as Error).message
        }\``,
        { parse_mode: "Markdown" }
      );
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–∏—Å–∫–∞
   */
  private async handleSearchCommand(
    msg: TelegramBot.Message,
    onlyNew: boolean
  ): Promise<void> {
    const chatId = msg.chat.id;
    const commandName = onlyNew ? "/search_new" : "/search";

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    this.recordUserInteraction(
      chatId,
      commandName,
      msg.from?.username,
      msg.from?.first_name
    );

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
      const processingMsg = await this.bot.sendMessage(
        chatId,
        `üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è ${MY_PLACE}...`
      );

      logger.info(
        `Telegram: –ù–∞—á–∞—Ç –ø–æ–∏—Å–∫ ${commandName} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${
          msg.from?.username || msg.from?.id
        }`
      );

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
      const outages = await getPowerOutagesQuick(30);

      let filteredOutages = outages;
      let messageText = "";

      if (onlyNew) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        filteredOutages = filterValidOutages(outages);

        messageText = `
üîå *–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω*

üìç –ú–µ—Å—Ç–æ: ${MY_PLACE}
üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: ${outages.length} –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö: ${filteredOutages.length} –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: ${formatDateForDisplay(new Date())}
`;
      } else {
        messageText = `
üîå *–ü–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω*

üìç –ú–µ—Å—Ç–æ: ${MY_PLACE}  
üìä –ù–∞–π–¥–µ–Ω–æ: ${outages.length} –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
üìÖ –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: ${formatDateForDisplay(new Date())}
`;
      }

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
      await this.bot.deleteMessage(chatId, processingMsg.message_id);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      await this.bot.sendMessage(chatId, messageText, {
        parse_mode: "Markdown",
      });

      if (filteredOutages.length > 0) {
        // –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        const reportPath = await saveReport(
          filteredOutages,
          `telegram-report-${onlyNew ? "new-" : ""}${Date.now()}`
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞
        await this.bot.sendDocument(chatId, reportPath, {
          caption: `üìÑ –û—Ç—á–µ—Ç –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö (${filteredOutages.length} –∑–∞–ø–∏—Å–µ–π)`,
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö
        const summary = this.createOutagesSummary(filteredOutages, onlyNew);
        await this.bot.sendMessage(chatId, summary, {
          parse_mode: "Markdown",
        });
      } else {
        await this.bot.sendMessage(
          chatId,
          `‚úÖ ${onlyNew ? "–ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π" : "–û—Ç–∫–ª—é—á–µ–Ω–∏–π"} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`
        );
      }

      logger.info(
        `Telegram: –ü–æ–∏—Å–∫ ${commandName} –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ: ${filteredOutages.length}/${outages.length}`
      );
    } catch (error) {
      logger.error(`Telegram: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ${commandName}:`, error);

      await this.bot.sendMessage(
        chatId,
        `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π:\n\`${
          (error as Error).message
        }\``,
        { parse_mode: "Markdown" }
      );
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –ø–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è–º
   */
  private createOutagesSummary(
    outages: PowerOutageInfo[],
    onlyNew: boolean
  ): string {
    const maxShow = 5; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –æ—Ç–∫–ª—é—á–µ–Ω–∏–π

    let summary = `
üìã *${onlyNew ? "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è" : "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è"}:*

`;

    outages.slice(0, maxShow).forEach((outage, index) => {
      summary += `${index + 1}. **${outage.place}**\n`;
      summary += `   üìç ${outage.addresses || "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω"}\n`;
      summary += `   ‚è∞ ${outage.dateFrom || "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"}\n`;
      if (outage.dateTo && outage.dateTo !== "-") {
        summary += `   üîÑ ${outage.dateTo}\n`;
      }
      summary += `\n`;
    });

    if (outages.length > maxShow) {
      summary += `_... –∏ –µ—â–µ ${outages.length - maxShow} –æ—Ç–∫–ª—é—á–µ–Ω–∏–π_\n`;
    }

    return summary;
  }

  /**
   * –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞: –ø–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –≤ –ë–î
   */
  private async handleAdminSearchCommand(
    msg: TelegramBot.Message
  ): Promise<void> {
    const chatId = msg.chat.id;
    const messageText = msg.text;

    try {
      logger.info(`Admin: –ó–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞ ${msg.from?.id}`);

      // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
      const params = messageText?.split(" ").slice(1) || [];

      if (params.length === 0) {
        const helpMessage = `
üîç *–ü–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –≤ –ë–î*

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
\`/admin_search [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]\`

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ \`/admin_search –ü—Ä–∏–æ–∑–µ—Ä—Å–∫–∏–π\` - –ø–æ —Ä–∞–π–æ–Ω—É
‚Ä¢ \`/admin_search –º–µ—Å—Ç–æ:–ü—Ä–∏–æ–∑–µ—Ä—Å–∫\` - –ø–æ –º–µ—Å—Ç—É  
‚Ä¢ \`/admin_search –¥–∞—Ç–∞:15.01.2025\` - –ø–æ –¥–∞—Ç–µ
‚Ä¢ \`/admin_search —Ä–∞–π–æ–Ω:–ü—Ä–∏–æ–∑–µ—Ä—Å–∫–∏–π –º–µ—Å—Ç–æ:–ö—É–∑–Ω–µ—á–Ω–æ–µ\` - –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫

**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
‚Ä¢ \`—Ä–∞–π–æ–Ω:–Ω–∞–∑–≤–∞–Ω–∏–µ\` - –ø–æ–∏—Å–∫ –ø–æ —Ä–∞–π–æ–Ω—É
‚Ä¢ \`–º–µ—Å—Ç–æ:–Ω–∞–∑–≤–∞–Ω–∏–µ\` - –ø–æ–∏—Å–∫ –ø–æ –º–µ—Å—Ç—É
‚Ä¢ \`–¥–∞—Ç–∞:–¥–¥.–º–º.–≥–≥–≥–≥\` - –ø–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ –æ—Ç
‚Ä¢ \`–ª–∏–º–∏—Ç:—á–∏—Å–ª–æ\` - –º–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
`;

        await this.bot.sendMessage(chatId, helpMessage, {
          parse_mode: "Markdown",
        });
        return;
      }

      // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      const filters: any = { limit: 10 };

      for (const param of params) {
        if (param.includes(":")) {
          const [key, value] = param.split(":");
          switch (key?.toLowerCase()) {
            case "—Ä–∞–π–æ–Ω":
            case "district":
              filters.district = value;
              break;
            case "–º–µ—Å—Ç–æ":
            case "place":
              filters.place = value;
              break;
            case "–¥–∞—Ç–∞":
            case "date":
              filters.dateFrom = value;
              break;
            case "–ª–∏–º–∏—Ç":
            case "limit":
              filters.limit = parseInt(value || "10", 10);
              break;
          }
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏—è, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ —Ä–∞–π–æ–Ω
          filters.district = param;
        }
      }

      const db = new DatabaseManager();
      await db.initialize();

      const results = db.searchOutages(filters);
      db.close();

      if (results.length === 0) {
        await this.bot.sendMessage(
          chatId,
          "üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
          { parse_mode: "Markdown" }
        );
        return;
      }

      let message = `üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞* (–Ω–∞–π–¥–µ–Ω–æ: ${results.length})\n\n`;

      results.forEach((result, index) => {
        const safePlace = escapeMarkdown(result.place || "–ù–µ —É–∫–∞–∑–∞–Ω–æ");
        const safeDistrict = escapeMarkdown(result.district || "–ù–µ —É–∫–∞–∑–∞–Ω");
        const safeAddresses = escapeMarkdown(result.addresses || "–ù–µ —É–∫–∞–∑–∞–Ω—ã");
        const safeReportFile = escapeMarkdown(result.reportFile || "–ù–µ—Ç");

        message += `${index + 1}\\. **${safePlace}** \\(${safeDistrict}\\)\n`;
        message += `   üìç –ê–¥—Ä–µ—Å–∞: ${safeAddresses}\n`;
        message += `   üìÖ –ü–µ—Ä–∏–æ–¥: ${result.dateFrom || "–ù–µ —É–∫–∞–∑–∞–Ω"} \\- ${
          result.dateTo || "–ù–µ —É–∫–∞–∑–∞–Ω"
        }\n`;
        message += `   üìÑ –û—Ç—á–µ—Ç: ${safeReportFile}\n`;
        message += `   üïê –î–æ–±–∞–≤–ª–µ–Ω–æ: ${new Date(
          result.createdAt
        ).toLocaleDateString("ru-RU")}\n\n`;
      });

      await this.bot.sendMessage(chatId, message, {
        parse_mode: "Markdown",
      });
    } catch (error) {
      logger.error("Telegram: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π:", error);

      await this.bot.sendMessage(
        chatId,
        `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:\n\`${(error as Error).message}\``,
        { parse_mode: "Markdown" }
      );
    }
  }

  /**
   * –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞: –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
   */
  private async handleAdminAnalyticsCommand(
    msg: TelegramBot.Message
  ): Promise<void> {
    const chatId = msg.chat.id;

    try {
      logger.info(`Admin: –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∞ ${msg.from?.id}`);

      const db = new DatabaseManager();
      await db.initialize();

      const stats = db.getOutagesStats();
      const userStats = db.getUserStats();

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
      const recentOutages = db.searchOutages({ limit: 5 });

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Ä–∞–π–æ–Ω–æ–≤
      const topDistricts = db.searchOutages({ limit: 100 });
      const districtCounts = topDistricts.reduce((acc, outage) => {
        const district = outage.district || "–ù–µ —É–∫–∞–∑–∞–Ω";
        acc[district] = (acc[district] || 0) + 1;
        return acc;
      }, {} as Record<string, number>);

      const sortedDistricts = Object.entries(districtCounts)
        .sort(([, a], [, b]) => b - a)
        .slice(0, 5);

      db.close();

      let message = `üìà *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*\n\n`;

      message += `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π:**\n`;
      message += `‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π: ${stats.totalOutages}\n`;
      message += `‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤: ${stats.uniqueDistricts}\n`;
      message += `‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç: ${stats.uniquePlaces}\n`;
      message += `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞: ${
        stats.lastOutageDate || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
      }\n\n`;

      message += `üë• **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n`;
      message += `‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userStats.totalUsers}\n`;
      message += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü: ${userStats.activeThisMonth}\n`;
      message += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: ${userStats.activeThisWeek}\n`;
      message += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${userStats.activeToday}\n`;
      message += `‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: ${userStats.newUsersThisMonth}\n`;
      message += `‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: ${userStats.newUsersThisWeek}\n`;
      message += `‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${userStats.newUsersToday}\n\n`;

      if (sortedDistricts.length > 0) {
        message += `üèÜ **–¢–æ–ø —Ä–∞–π–æ–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–∫–ª—é—á–µ–Ω–∏–π:**\n`;
        sortedDistricts.forEach(([district, count], index) => {
          const safeDistrict = escapeMarkdown(district);
          message += `${index + 1}\\. ${safeDistrict}: ${count} –æ—Ç–∫–ª—é—á–µ–Ω–∏–π\n`;
        });
        message += `\n`;
      }

      if (userStats.topCommands.length > 0) {
        message += `üìã **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–∑–∞ –º–µ—Å—è—Ü):**\n`;
        userStats.topCommands
          .slice(0, 5)
          .forEach(({ command, count }, index) => {
            const safeCommand = escapeMarkdown(command);
            message += `${
              index + 1
            }\\. ${safeCommand}: ${count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n`;
          });
        message += `\n`;
      }

      if (recentOutages.length > 0) {
        message += `üïê **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:**\n`;
        recentOutages.slice(0, 3).forEach((outage, index) => {
          const safePlace = escapeMarkdown(outage.place || "–ù–µ —É–∫–∞–∑–∞–Ω–æ");
          const safeDistrict = escapeMarkdown(outage.district || "–ù–µ —É–∫–∞–∑–∞–Ω");
          message += `${index + 1}\\. ${safePlace} \\(${safeDistrict}\\)\n`;
          message += `   üìÖ ${outage.dateFrom || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}\n`;
        });
      }

      await this.bot.sendMessage(chatId, message, {
        parse_mode: "Markdown",
      });
    } catch (error) {
      logger.error("Telegram: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:", error);

      await this.bot.sendMessage(
        chatId,
        `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:\n\`${
          (error as Error).message
        }\``,
        { parse_mode: "Markdown" }
      );
    }
  }

  /**
   * –ó–∞–ø–∏—Å—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  private recordUserInteraction(
    chatId: number,
    command: string,
    username?: string,
    firstName?: string
  ): void {
    try {
      const db = new DatabaseManager();
      db.recordUserInteraction(chatId, command, username, firstName);
      db.close();
    } catch (error) {
      // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –ª–æ–≥–∏
      // logger.error("Bot: –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:", error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
   */
  private async checkAndNotifyVersionUpdate(): Promise<void> {
    try {
      const currentVersion = this.getAppVersion();
      const lastVersion = this.subscriptionManager.getLastNotifiedVersion();

      // –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
      if (lastVersion !== currentVersion && currentVersion !== "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è") {
        logger.info(
          `Bot: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è ${currentVersion} (–ø—Ä–µ–¥—ã–¥—É—â–∞—è: ${
            lastVersion || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
          })`
        );

        const subscribers = this.subscriptionManager.getSubscribers();

        if (subscribers.length > 0) {
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–∞–µ–º –±–æ—Ç—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è)
          setTimeout(async () => {
            await this.sendAutoUpdateNotification(currentVersion);
          }, 5000);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—É—é
        this.subscriptionManager.setLastNotifiedVersion(currentVersion);
      }
    } catch (error) {
      logger.error("Bot: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä—Å–∏–∏:", error);
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
   */
  private async sendAutoUpdateNotification(version: string): Promise<void> {
    try {
      const subscribers = this.subscriptionManager.getSubscribers();

      logger.info(
        `Bot: –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ –≤–µ—Ä—Å–∏–∏ ${version} - ${subscribers.length} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º`
      );

      let successCount = 0;
      let errorCount = 0;

      const updateMessage = `
üöÄ *–ë–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!*

üì¶ **–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è:** ${version}
‚ú® **–£–ª—É—á—à–µ–Ω–∏—è:**
‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã
‚Ä¢ –£–ª—É—á—à–µ–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å  
‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏

üîÑ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
`;

      // –†–∞—Å—Å—ã–ª–∞–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Telegram
      for (const subscriber of subscribers) {
        if (!subscriber) {
          continue;
        }

        try {
          await this.bot.sendMessage(subscriber.chatId, updateMessage, {
            parse_mode: "Markdown",
          });

          successCount++;

          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          await this.subscriptionManager.updateLastNotified(subscriber.chatId);
        } catch (error) {
          errorCount++;
          logger.warn(
            `Bot: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${subscriber.chatId}:`,
            error
          );
        }

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É - –ª–∏–º–∏—Ç Telegram)
        await new Promise((resolve) => setTimeout(resolve, 35));
      }

      logger.info(
        `Bot: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ –≤–µ—Ä—Å–∏–∏ ${version} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –£—Å–ø–µ—à–Ω–æ: ${successCount}/${subscribers.length}`
      );

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
      if (ADMIN_CHAT_IDS.length > 0) {
        const adminMessage = `
üöÄ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã**

üì¶ **–í–µ—Ä—Å–∏—è:** ${version}
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${subscribers.length}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${successCount}
‚Ä¢ –û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: ${errorCount}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((successCount / subscribers.length) * 100)}%
`;

        for (const adminId of ADMIN_CHAT_IDS) {
          try {
            await this.bot.sendMessage(adminId, adminMessage, {
              parse_mode: "Markdown",
            });
          } catch (error) {
            logger.warn(
              `Bot: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${adminId}:`,
              error
            );
          }
        }
      }
    } catch (error) {
      logger.error(
        "Bot: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:",
        error
      );
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
   */
  private formatFileSize(bytes: number): string {
    if (bytes === 0) return "0 B";
    const k = 1024;
    const sizes = ["B", "KB", "MB", "GB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
   */
  public start(): void {
    if (this.isPolling) {
      console.log("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
      return;
    }

    this.bot.startPolling();
    this.isPolling = true;
    console.log("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω");
    logger.info("Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    this.checkAndNotifyVersionUpdate();
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
   */
  public stop(): void {
    if (!this.isPolling) {
      console.log("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω");
      return;
    }

    this.bot.stopPolling();
    this.stopNotificationChecker();
    this.subscriptionManager.close();
    this.isPolling = false;
    console.log("üõë Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
   */
  public isRunning(): boolean {
    return this.isPolling;
  }
}
