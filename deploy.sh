#!/bin/bash

# üöÄ –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è Rosseti Parser –Ω–∞ Ubuntu —Å–µ—Ä–≤–µ—Ä

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "${CYAN}================================================${NC}"
    echo -e "${CYAN} üöÄ –î–µ–ø–ª–æ–π Rosseti Parser${NC}"
    echo -e "${CYAN}================================================${NC}"
}

print_message() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–µ –æ—Ç root
check_user() {
    if [ "$EUID" -eq 0 ]; then
        print_error "–ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ root!"
        print_message "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å sudo –ø—Ä–∞–≤–∞–º–∏"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è sudo
check_sudo() {
    if ! command -v sudo &> /dev/null; then
        print_error "sudo –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        print_message "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ sudo: apt install sudo"
        exit 1
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
install_docker() {
    if command -v docker &> /dev/null; then
        print_success "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_message "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh get-docker.sh
        sudo usermod -aG docker $USER
        rm get-docker.sh
        print_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose
install_docker_compose() {
    if command -v docker-compose &> /dev/null; then
        print_success "Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_message "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose..."
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        print_success "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    print_message "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    sudo apt update
    sudo apt install -y git htop nano curl wget unzip cron
    print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
setup_project() {
    print_message "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫
    mkdir -p data logs reports backups
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤
    chmod 755 data logs reports backups
    chmod +x docker/manage.sh docker/entrypoint.sh docker/start.sh
    
    print_success "–ü—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ .env —Ñ–∞–π–ª–∞
setup_env() {
    if [ ! -f .env ]; then
        print_message "–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
        cp env.example .env
        chmod 600 .env
        
        print_warning "–í–ê–ñ–ù–û: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env!"
        echo ""
        echo "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å:"
        echo "- TELEGRAM_BOT_TOKEN (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)"
        echo "- TELEGRAM_ADMIN_CHAT (–≤–∞—à Chat ID)"
        echo ""
        read -p "–•–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å .env —Å–µ–π—á–∞—Å? (y/N): " edit_env
        
        if [[ $edit_env =~ ^[Yy]$ ]]; then
            nano .env
        else
            print_warning "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å .env –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!"
        fi
    else
        print_success ".env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞
create_systemd_service() {
    print_message "–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞..."
    
    local service_file="/etc/systemd/system/rosseti-parser.service"
    local project_dir="$(pwd)"
    local username="$(whoami)"
    
    sudo tee "$service_file" > /dev/null <<EOF
[Unit]
Description=Rosseti Parser Bot
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=$project_dir
ExecStart=$project_dir/docker/manage.sh start
ExecStop=$project_dir/docker/manage.sh stop
TimeoutStartSec=0
User=$username
Group=$username

[Install]
WantedBy=multi-user.target
EOF

    sudo systemctl daemon-reload
    sudo systemctl enable rosseti-parser.service
    
    print_success "Systemd —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤
setup_backups() {
    print_message "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±—ç–∫–∞–ø–æ–≤
    sudo mkdir -p /backup/rosseti
    sudo chown $(whoami):$(whoami) /backup/rosseti
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    local sync_script="$HOME/sync-backups.sh"
    cat > "$sync_script" <<'EOF'
#!/bin/bash
PROJECT_DIR="/home/$(whoami)/projects/parser_rosseti"
BACKUP_DIR="/backup/rosseti"
DATE=$(date +%Y-%m-%d)

mkdir -p "$BACKUP_DIR/$DATE"

if [ -d "$PROJECT_DIR/data/backups" ]; then
    cp -r "$PROJECT_DIR/data/backups"/* "$BACKUP_DIR/$DATE/" 2>/dev/null || true
fi

if [ -d "$PROJECT_DIR/backups" ]; then
    cp -r "$PROJECT_DIR/backups"/* "$BACKUP_DIR/$DATE/" 2>/dev/null || true
fi

find "$BACKUP_DIR" -type d -name "20*" -mtime +30 -exec rm -rf {} + 2>/dev/null || true

echo "–ë—ç–∫–∞–ø—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: $BACKUP_DIR/$DATE"
EOF
    
    chmod +x "$sync_script"
    
    print_success "–°–∫—Ä–∏–ø—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±—ç–∫–∞–ø–æ–≤ —Å–æ–∑–¥–∞–Ω"
    print_message "–î–æ–±–∞–≤—å—Ç–µ –≤ crontab: 0 4 * * * $sync_script"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
setup_firewall() {
    print_message "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∞–π—Ä–≤–æ–ª–∞..."
    
    sudo apt install -y ufw
    sudo ufw --force default deny incoming
    sudo ufw --force default allow outgoing
    sudo ufw --force allow ssh
    sudo ufw --force enable
    
    print_success "–§–∞–π—Ä–≤–æ–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
first_run() {
    print_message "–°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞..."
    
    ./docker/manage.sh build
    ./docker/manage.sh start
    
    print_success "–ü—Ä–æ–µ–∫—Ç –∑–∞–ø—É—â–µ–Ω!"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    sleep 5
    ./docker/manage.sh status
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
check_completion() {
    print_header
    print_success "–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    echo ""
    echo "üìã –ß—Ç–æ –¥–∞–ª—å—à–µ:"
    echo "1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ–≥–æ:"
    echo "   nano .env"
    echo ""
    echo "2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:"
    echo "   sudo systemctl restart rosseti-parser.service"
    echo ""
    echo "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã:"
    echo "   ./docker/manage.sh backup-auto"
    echo ""
    echo "4. –î–æ–±–∞–≤—å—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –±—ç–∫–∞–ø–æ–≤ –≤ crontab:"
    echo "   crontab -e"
    echo "   # –î–æ–±–∞–≤–∏—Ç—å: 0 4 * * * $HOME/sync-backups.sh"
    echo ""
    echo "üìä –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "‚Ä¢ ./docker/manage.sh status       - —Å—Ç–∞—Ç—É—Å"
    echo "‚Ä¢ ./docker/manage.sh logs-follow  - –ª–æ–≥–∏"
    echo "‚Ä¢ sudo systemctl status rosseti-parser.service"
    echo "‚Ä¢ ./docker/manage.sh backup-list  - —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤"
    echo ""
    print_success "–ì–æ—Ç–æ–≤–æ! üéâ"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    
    print_message "–ù–∞—á–∞–ª–æ –¥–µ–ø–ª–æ—è..."
    
    check_user
    check_sudo
    install_dependencies
    install_docker
    install_docker_compose
    
    print_warning "–í–ê–ñ–ù–û: –ü–µ—Ä–µ–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã docker!"
    read -p "–ü–µ—Ä–µ–ª–æ–≥–∏–Ω–∏–ª–∏—Å—å? –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " continue_deploy
    
    if [[ ! $continue_deploy =~ ^[Yy]$ ]]; then
        print_message "–î–µ–ø–ª–æ–π –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–µ—Ä–µ–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞."
        exit 0
    fi
    
    setup_project
    setup_env
    create_systemd_service
    setup_backups
    setup_firewall
    first_run
    check_completion
}

# –ó–∞–ø—É—Å–∫
main "$@"
