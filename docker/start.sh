#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
print_message() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞
check_env_file() {
    if [ ! -f ".env" ]; then
        print_error ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        print_message "–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ env.example:"
        echo -e "${YELLOW}cp env.example .env${NC}"
        echo -e "${YELLOW}nano .env${NC}"
        echo ""
        print_message "–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ .env
check_bot_token() {
    if ! grep -q "TELEGRAM_BOT_TOKEN=" .env || grep -q "TELEGRAM_BOT_TOKEN=your_bot_token_here" .env; then
        print_error "TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!"
        print_message "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"
        exit 1
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    print_message "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    mkdir -p data logs reports
    print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_existing() {
    print_message "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose down --remove-orphans 2>/dev/null || true
    print_success "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
build_image() {
    print_message "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
    if docker-compose build; then
        print_success "–û–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –æ–±—Ä–∞–∑–∞"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
start_bot() {
    print_message "–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞..."
    if docker-compose up -d rosseti-parser; then
        print_success "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
        print_message "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: docker-compose logs -f rosseti-parser"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"
        exit 1
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
show_status() {
    echo ""
    print_message "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker-compose ps
    echo ""
    print_message "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤:"
    echo "docker-compose logs -f rosseti-parser"
    echo ""
    print_message "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:"
    echo "docker-compose down"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_message "üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –ø–∞—Ä—Å–µ—Ä–∞ –†–æ—Å—Å–µ—Ç–∏"
    echo ""
    
    check_env_file
    check_bot_token
    create_directories
    stop_existing
    build_image
    start_bot
    show_status
    
    print_success "üéâ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    "check")
        check_env_file
        check_bot_token
        print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
        ;;
    "build")
        build_image
        ;;
    "stop")
        print_message "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞..."
        docker-compose down
        print_success "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        ;;
    "restart")
        print_message "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
        docker-compose restart rosseti-parser
        print_success "–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
        ;;
    "logs")
        docker-compose logs -f rosseti-parser
        ;;
    "status")
        show_status
        ;;
    *)
        main
        ;;
esac
