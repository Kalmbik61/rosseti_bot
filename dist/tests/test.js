/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ü—Ä–∏–æ–∑–µ—Ä—å—è
 */
import { findPriozeryeInTables, quickFindPriozerie } from "../parser.js";
import { buildSearchUrl, formatPriozeryeReport } from "../utils/index.js";
async function testSimplePriozerie() {
    console.log("üîç –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ü—Ä–∏–æ–∑–µ—Ä—å—è\n");
    try {
        // –¢–µ—Å—Ç 1: –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∑–∞ 30 –¥–Ω–µ–π
        console.log("1Ô∏è‚É£ –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∑–∞ 30 –¥–Ω–µ–π:");
        const quickResults = await quickFindPriozerie(30);
        console.log(`–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${quickResults.length}`);
        if (quickResults.length > 0) {
            const firstResult = quickResults[0];
            console.log("–ü–µ—Ä–≤–∞—è –Ω–∞–π–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:");
            console.log(`  –í–∞—Ä–∏–∞–Ω—Ç: ${firstResult.settlementVariant}`);
            console.log(`  –ö–æ–ª–æ–Ω–æ–∫: ${firstResult.columns.length}`);
            console.log(`  –ù–∞–π–¥–µ–Ω–æ –≤ –∫–æ–ª–æ–Ω–∫–µ: ${firstResult.foundInColumn + 1}`);
            console.log("  –î–∞–Ω–Ω—ã–µ:", firstResult.columns.filter((col) => col.trim()));
        }
        // –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
        console.log("\n2Ô∏è‚É£ –ü–æ–∏—Å–∫ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏:");
        const dateFrom = new Date("2025-08-01");
        const dateTo = new Date("2025-08-31");
        const url = buildSearchUrl(dateFrom, dateTo);
        console.log(`URL: ${url}`);
        const detailedResult = await findPriozeryeInTables(url);
        console.log(`–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö: ${detailedResult.totalRows}`);
        console.log(`–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${detailedResult.matchesFound}`);
        // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        const report = formatPriozeryeReport(detailedResult.rows);
        console.log("\nüìã –û–¢–ß–ï–¢:");
        console.log(report);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if (detailedResult.rows.length > 0) {
            await saveSimpleResults(detailedResult.rows);
        }
        console.log("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    }
    catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
    }
}
/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ø—Ä–æ—Å—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 */
async function saveSimpleResults(rows) {
    try {
        const { promises: fs } = await import("fs");
        await fs.mkdir("reports/test-results", { recursive: true });
        const filename = `priozerie-simple-${new Date().toISOString().split("T")[0]}.json`;
        const filePath = `reports/test-results/${filename}`;
        const saveData = {
            timestamp: new Date().toISOString(),
            searchTarget: "–ü—Ä–∏–æ–∑–µ—Ä—å–µ/–ü—Ä–∏–æ–∑—ë—Ä—å–µ",
            totalFound: rows.length,
            rows: rows.map((row) => ({
                variant: row.settlementVariant,
                foundInColumn: row.foundInColumn,
                columns: row.columns,
                // rawHtml –∏—Å–∫–ª—é—á–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
            })),
        };
        await fs.writeFile(filePath, JSON.stringify(saveData, null, 2), "utf8");
        console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${filePath}`);
    }
    catch (error) {
        console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", error.message);
    }
}
// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
    testSimplePriozerie().catch(console.error);
}
//# sourceMappingURL=test.js.map