#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º –ø–∞—Ä—Å–µ—Ä–∞ –†–æ—Å—Å–µ—Ç–∏

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "${CYAN}================================================${NC}"
    echo -e "${CYAN} ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–æ–º –†–æ—Å—Å–µ—Ç–∏${NC}"
    echo -e "${CYAN}================================================${NC}"
}

print_message() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
show_help() {
    print_header
    echo ""
    echo -e "${YELLOW}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:${NC}"
    echo "  ./docker/manage.sh [–∫–æ–º–∞–Ω–¥–∞]"
    echo ""
    echo -e "${YELLOW}–ö–æ–º–∞–Ω–¥—ã:${NC}"
    echo "  start         - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
    echo "  stop          - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"
    echo "  restart       - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
    echo "  status        - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "  logs          - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞"
    echo "  logs-follow   - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "  build         - –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑"
    echo "  shell         - –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (bash)"
    echo "  api           - –ó–∞–ø—É—Å—Ç–∏—Ç—å API –≤–µ—Ä—Å–∏—é"
    echo "  test          - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"
    echo "  clean         - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –æ–±—Ä–∞–∑—ã"
    echo "  backup        - –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö"
    echo "  backup-db     - –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø —Ç–æ–ª—å–∫–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    echo "  backup-list   - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤"
    echo "  backup-auto   - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã"
    echo "  restore       - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—ç–∫–∞–ø–∞"
    echo "  restore-db    - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
    echo ""
    echo -e "${YELLOW}–ü—Ä–∏–º–µ—Ä—ã:${NC}"
    echo "  ./docker/manage.sh start"
    echo "  ./docker/manage.sh logs-follow"
    echo "  ./docker/manage.sh shell"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
check_docker() {
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
start_bot() {
    print_message "–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞..."
    docker-compose up -d rosseti-parser
    print_success "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"
    sleep 3
    show_status
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
stop_bot() {
    print_message "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞..."
    docker-compose down
    print_success "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
restart_bot() {
    print_message "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
    docker-compose restart rosseti-parser
    print_success "–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
    sleep 3
    show_status
}

# –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
show_status() {
    print_message "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker-compose ps
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    if docker-compose ps | grep -q "rosseti-parser.*Up"; then
        print_success "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        container_id=$(docker-compose ps -q rosseti-parser)
        if [ -n "$container_id" ]; then
            echo ""
            print_message "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
            docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}" $container_id
        fi
    else
        print_warning "–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
show_logs() {
    print_message "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:"
    docker-compose logs --tail=100 rosseti-parser
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
follow_logs() {
    print_message "–õ–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
    docker-compose logs -f rosseti-parser
}

# –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
build_image() {
    print_message "–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞..."
    docker-compose build --no-cache rosseti-parser
    print_success "–û–±—Ä–∞–∑ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω"
}

# –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
enter_shell() {
    print_message "–í—Ö–æ–¥ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
    if docker-compose ps | grep -q "rosseti-parser.*Up"; then
        docker-compose exec rosseti-parser bash
    else
        print_warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å–∫–∞—é –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
        docker-compose run --rm rosseti-parser bash
    fi
}

# –ó–∞–ø—É—Å–∫ API
start_api() {
    print_message "–ó–∞–ø—É—Å–∫ API –≤–µ—Ä—Å–∏–∏..."
    docker-compose --profile api up -d rosseti-api
    print_success "API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000"
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
run_tests() {
    print_message "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    docker-compose run --rm rosseti-parser test
}

# –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –æ–±—Ä–∞–∑–æ–≤
clean_all() {
    print_warning "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –æ–±—Ä–∞–∑—ã –ø—Ä–æ–µ–∫—Ç–∞!"
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_message "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
        docker-compose down --volumes --remove-orphans
        
        print_message "–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤..."
        docker images | grep rosseti | awk '{print $3}' | xargs -r docker rmi -f
        
        print_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    else
        print_message "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞
create_backup() {
    local backup_dir="backups"
    local backup_file="$backup_dir/rosseti-full-backup-$(date +%Y%m%d-%H%M%S).tar.gz"
    
    print_message "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞..."
    mkdir -p "$backup_dir"
    
    tar -czf "$backup_file" data/ logs/ reports/ 2>/dev/null || true
    
    if [ -f "$backup_file" ]; then
        local size=$(du -h "$backup_file" | cut -f1)
        print_success "–ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $backup_file ($size)"
    else
        print_error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Ç–æ–ª—å–∫–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
create_db_backup() {
    print_message "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    if docker-compose ps | grep -q "rosseti-parser.*Up"; then
        # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        docker-compose exec rosseti-parser node -e "
            import('./dist/src/utils/backup.js').then(module => {
                const { backupManager } = module;
                return backupManager.createBackup();
            }).then(path => {
                console.log('–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω:', path);
            }).catch(console.error);
        "
    else
        # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π
        docker-compose run --rm rosseti-parser node -e "
            import('./dist/src/utils/backup.js').then(module => {
                const { backupManager } = module;
                return backupManager.createBackup();
            }).then(path => {
                console.log('–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω:', path);
            }).catch(console.error);
        "
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤
list_backups() {
    print_message "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤:"
    
    echo ""
    echo "üìÅ –ü–æ–ª–Ω—ã–µ –±—ç–∫–∞–ø—ã (tar.gz):"
    if [ -d "backups" ] && ls backups/*.tar.gz 1> /dev/null 2>&1; then
        for backup in backups/*.tar.gz; do
            local size=$(du -h "$backup" | cut -f1)
            local date=$(stat -f "%Sm" -t "%Y-%m-%d %H:%M" "$backup" 2>/dev/null || stat -c "%y" "$backup" 2>/dev/null | cut -d' ' -f1,2 | cut -d'.' -f1)
            printf "  %-40s %8s  %s\n" "$(basename "$backup")" "$size" "$date"
        done
    else
        echo "  –ü–æ–ª–Ω—ã–µ –±—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    
    echo ""
    echo "üóÑÔ∏è –ë—ç–∫–∞–ø—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:"
    if [ -d "data/backups" ] && ls data/backups/*.db 1> /dev/null 2>&1; then
        for backup in data/backups/*.db; do
            local size=$(du -h "$backup" | cut -f1)
            local date=$(stat -f "%Sm" -t "%Y-%m-%d %H:%M" "$backup" 2>/dev/null || stat -c "%y" "$backup" 2>/dev/null | cut -d' ' -f1,2 | cut -d'.' -f1)
            printf "  %-40s %8s  %s\n" "$(basename "$backup")" "$size" "$date"
        done
    else
        echo "  –ë—ç–∫–∞–ø—ã –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    
    echo ""
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –±—ç–∫–∞–ø–æ–≤
    local total_size=0
    if [ -d "backups" ]; then
        total_size=$(du -sh backups 2>/dev/null | cut -f1 || echo "0")
        echo "–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–ª–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤: $total_size"
    fi
    
    if [ -d "data/backups" ]; then
        local db_size=$(du -sh data/backups 2>/dev/null | cut -f1 || echo "0")
        echo "–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –±—ç–∫–∞–ø–æ–≤ –ë–î: $db_size"
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤
setup_auto_backup() {
    print_message "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤..."
    
    echo ""
    echo "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –±—ç–∫–∞–ø–æ–≤:"
    echo "1) –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 3:00"
    echo "2) –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤"
    echo "3) –ö–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤"
    echo "4) –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 2:00)"
    echo "5) –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cron"
    echo "6) –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–±—ç–∫–∞–ø—ã"
    echo ""
    
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1-6): " choice
    
    case $choice in
        1)
            setup_cron_job "0 3 * * *" "daily"
            ;;
        2)
            setup_cron_job "0 */6 * * *" "6h"
            ;;
        3)
            setup_cron_job "0 */12 * * *" "12h"
            ;;
        4)
            setup_cron_job "0 2 * * 0" "weekly"
            ;;
        5)
            show_cron_jobs
            ;;
        6)
            remove_cron_jobs
            ;;
        *)
            print_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            ;;
    esac
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ cron job
setup_cron_job() {
    local schedule="$1"
    local description="$2"
    local script_path="$(pwd)/docker/manage.sh"
    local log_path="$(pwd)/logs/backup-cron.log"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    mkdir -p "$(pwd)/logs"
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è
    remove_cron_jobs
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    (crontab -l 2>/dev/null; echo "$schedule cd $(pwd) && $script_path backup-db >> $log_path 2>&1") | crontab -
    
    print_success "–ê–≤—Ç–æ–±—ç–∫–∞–ø –Ω–∞—Å—Ç—Ä–æ–µ–Ω ($description): $schedule"
    print_message "–õ–æ–≥–∏ –±—ç–∫–∞–ø–æ–≤: $log_path"
}

# –ü–æ–∫–∞–∑–∞—Ç—å cron –∑–∞–¥–∞–Ω–∏—è
show_cron_jobs() {
    echo ""
    echo "–¢–µ–∫—É—â–∏–µ cron –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–±—ç–∫–∞–ø–æ–≤:"
    crontab -l 2>/dev/null | grep "manage.sh backup" || echo "–ê–≤—Ç–æ–±—ç–∫–∞–ø—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    echo ""
}

# –£–¥–∞–ª–∏—Ç—å cron –∑–∞–¥–∞–Ω–∏—è
remove_cron_jobs() {
    local temp_cron=$(mktemp)
    crontab -l 2>/dev/null | grep -v "manage.sh backup" > "$temp_cron" || true
    crontab "$temp_cron"
    rm "$temp_cron"
    print_success "–ê–≤—Ç–æ–±—ç–∫–∞–ø—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã"
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞
restore_backup() {
    local backup_dir="backups"
    
    if [ ! -d "$backup_dir" ]; then
        print_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–æ–ª–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        return 1
    fi
    
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª–Ω—ã–µ –±—ç–∫–∞–ø—ã:"
    ls -la "$backup_dir"/*.tar.gz 2>/dev/null || {
        print_error "–ü–æ–ª–Ω—ã–µ –±—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return 1
    }
    
    read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞: " backup_file
    
    if [ -f "$backup_dir/$backup_file" ]; then
        print_warning "–≠—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ!"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            print_message "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞..."
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            if docker-compose ps | grep -q "rosseti-parser.*Up"; then
                print_message "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞..."
                docker-compose stop rosseti-parser
            fi
            
            tar -xzf "$backup_dir/$backup_file"
            print_success "–î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ $backup_file"
            
            print_message "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
            docker-compose start rosseti-parser
        fi
    else
        print_error "–§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
restore_db_backup() {
    local backup_dir="data/backups"
    
    if [ ! -d "$backup_dir" ]; then
        print_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–æ–≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        return 1
    fi
    
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:"
    ls -la "$backup_dir"/*.db 2>/dev/null || {
        print_error "–ë—ç–∫–∞–ø—ã –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return 1
    }
    
    read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞ –ë–î: " backup_file
    
    if [ -f "$backup_dir/$backup_file" ]; then
        print_warning "–≠—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            print_message "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
            local was_running=false
            if docker-compose ps | grep -q "rosseti-parser.*Up"; then
                was_running=true
                print_message "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞..."
                docker-compose stop rosseti-parser
            fi
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ë–î —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—É
            docker-compose run --rm rosseti-parser node -e "
                import('./dist/src/utils/backup.js').then(module => {
                    const { backupManager } = module;
                    return backupManager.restoreFromBackup('/app/data/backups/$backup_file');
                }).then(() => {
                    console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
                }).catch(console.error);
            "
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–ø—É—â–µ–Ω
            if [ "$was_running" = true ]; then
                print_message "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
                docker-compose start rosseti-parser
            fi
            
            print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ $backup_file"
        fi
    else
        print_error "–§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    check_docker
    
    case "${1:-}" in
        "start"|"up")
            start_bot
            ;;
        "stop"|"down")
            stop_bot
            ;;
        "restart")
            restart_bot
            ;;
        "status"|"ps")
            show_status
            ;;
        "logs")
            show_logs
            ;;
        "logs-follow"|"logs-f")
            follow_logs
            ;;
        "build")
            build_image
            ;;
        "shell"|"bash")
            enter_shell
            ;;
        "api")
            start_api
            ;;
        "test")
            run_tests
            ;;
        "clean")
            clean_all
            ;;
        "backup")
            create_backup
            ;;
        "backup-db")
            create_db_backup
            ;;
        "backup-list")
            list_backups
            ;;
        "backup-auto")
            setup_auto_backup
            ;;
        "restore")
            restore_backup
            ;;
        "restore-db")
            restore_db_backup
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${1:-}"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main "$@"
