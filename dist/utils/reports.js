/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
 */
import { MY_PLACE } from "../config.js";
/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ –ø—Ä–æ—Å—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 */
export function formatPriozeryeReport(rows) {
    if (rows.length === 0) {
        return `‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è ${MY_PLACE} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`;
    }
    let report = `üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è ${MY_PLACE}: ${rows.length}\n\n`;
    rows.forEach((row, index) => {
        report += `${index + 1}. ${row.settlementVariant}\n`;
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
        row.columns.forEach((col, colIndex) => {
            if (col.trim()) {
                const marker = colIndex === row.foundInColumn ? "üëâ " : "   ";
                report += `${marker}–ö–æ–ª–æ–Ω–∫–∞ ${colIndex + 1}: ${col}\n`;
            }
        });
        report += "\n";
    });
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –Ω–∞–ø–∏—Å–∞–Ω–∏—è
    const variants = rows.reduce((acc, row) => {
        acc[row.settlementVariant] = (acc[row.settlementVariant] || 0) + 1;
        return acc;
    }, {});
    report += "üìà –í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è:\n";
    Object.entries(variants).forEach(([variant, count]) => {
        report += `   ${variant}: ${count} –∑–∞–ø–∏—Å–µ–π\n`;
    });
    return report;
}
//# sourceMappingURL=reports.js.map