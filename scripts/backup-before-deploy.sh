#!/bin/bash

# üîÑ –°–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
# –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="$PROJECT_DIR/backups/deploy_$DATE"
CONTAINER_NAME="rosseti-parser-bot"

print_info "–ù–∞—á–∞–ª–æ –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º..."
print_info "–î–∞—Ç–∞: $(date)"
print_info "–ü—Ä–æ–µ–∫—Ç: $PROJECT_DIR"
print_info "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–∞: $BACKUP_DIR"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–∞
mkdir -p "$BACKUP_DIR"

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
check_container() {
    if docker ps -a --format "table {{.Names}}" | grep -q "^$CONTAINER_NAME$"; then
        return 0
    else
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –±—ç–∫–∞–ø–∞ –∏–∑ named volume
backup_from_volume() {
    local volume_name="$1"
    local backup_file="$2"
    
    print_info "–ë—ç–∫–∞–ø volume: $volume_name -> $backup_file"
    
    if docker volume inspect "$volume_name" >/dev/null 2>&1; then
        docker run --rm \
            -v "$volume_name":/source \
            -v "$BACKUP_DIR":/backup \
            alpine sh -c "cd /source && tar czf /backup/$backup_file ."
        
        if [ -f "$BACKUP_DIR/$backup_file" ]; then
            print_success "Volume $volume_name –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω: $backup_file"
        else
            print_error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ volume $volume_name"
            return 1
        fi
    else
        print_warning "Volume $volume_name –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –±—ç–∫–∞–ø–∞ –∏–∑ bind mount
backup_from_bind_mount() {
    local source_dir="$1"
    local backup_file="$2"
    
    print_info "–ë—ç–∫–∞–ø bind mount: $source_dir -> $backup_file"
    
    if [ -d "$source_dir" ]; then
        cd "$source_dir"
        tar czf "$BACKUP_DIR/$backup_file" .
        print_success "Bind mount $source_dir –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω: $backup_file"
    else
        print_warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $source_dir –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –±—ç–∫–∞–ø–∞ –∏–∑ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
backup_from_container() {
    local container_path="$1"
    local backup_file="$2"
    
    print_info "–ë—ç–∫–∞–ø –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: $container_path -> $backup_file"
    
    if docker exec "$CONTAINER_NAME" test -d "$container_path" 2>/dev/null; then
        docker exec "$CONTAINER_NAME" tar czf "/tmp/$backup_file" -C "$container_path" .
        docker cp "$CONTAINER_NAME:/tmp/$backup_file" "$BACKUP_DIR/$backup_file"
        docker exec "$CONTAINER_NAME" rm "/tmp/$backup_file"
        print_success "–î–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã: $backup_file"
    else
        print_warning "–ü—É—Ç—å $container_path –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
}

# –≠–∫—Å–ø–æ—Ä—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
export_current_settings() {
    print_info "–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    cat > "$BACKUP_DIR/backup_info.txt" <<EOF
–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $(date)
–ü—Ä–æ–µ–∫—Ç: Rosseti Parser Bot
–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: $PROJECT_DIR
–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: $CONTAINER_NAME

=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ ===
Docker –≤–µ—Ä—Å–∏—è: $(docker --version 2>/dev/null || echo "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
Docker Compose –≤–µ—Ä—Å–∏—è: $(docker-compose --version 2>/dev/null || echo "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

=== –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ===
EOF

    if check_container; then
        echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ‚úÖ" >> "$BACKUP_DIR/backup_info.txt"
        docker ps -a --filter name="$CONTAINER_NAME" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" >> "$BACKUP_DIR/backup_info.txt"
    else
        echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: ‚ùå" >> "$BACKUP_DIR/backup_info.txt"
    fi

    echo "" >> "$BACKUP_DIR/backup_info.txt"
    echo "=== Docker volumes ===" >> "$BACKUP_DIR/backup_info.txt"
    docker volume ls | grep rosseti >> "$BACKUP_DIR/backup_info.txt" 2>/dev/null || echo "Named volumes –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" >> "$BACKUP_DIR/backup_info.txt"
    
    print_success "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ backup_info.txt"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±—ç–∫–∞–ø–∞
main_backup() {
    local backup_success=0
    
    # –ü–æ–ø—ã—Ç–∫–∞ –±—ç–∫–∞–ø–∞ named volumes (–¥–ª—è Dokploy)
    if backup_from_volume "rosseti_data" "data_volume.tar.gz"; then
        backup_success=1
    fi
    
    if backup_from_volume "rosseti_logs" "logs_volume.tar.gz"; then
        backup_success=1
    fi
    
    if backup_from_volume "rosseti_reports" "reports_volume.tar.gz"; then
        backup_success=1
    fi
    
    # –ü–æ–ø—ã—Ç–∫–∞ –±—ç–∫–∞–ø–∞ bind mounts (–¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ Docker)
    if backup_from_bind_mount "$PROJECT_DIR/data" "data_bind.tar.gz"; then
        backup_success=1
    fi
    
    if backup_from_bind_mount "$PROJECT_DIR/logs" "logs_bind.tar.gz"; then
        backup_success=1
    fi
    
    if backup_from_bind_mount "$PROJECT_DIR/reports" "reports_bind.tar.gz"; then
        backup_success=1
    fi
    
    # –ü–æ–ø—ã—Ç–∫–∞ –±—ç–∫–∞–ø–∞ –∏–∑ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    if check_container && docker ps --filter name="$CONTAINER_NAME" --filter status=running | grep -q "$CONTAINER_NAME"; then
        if backup_from_container "/app/data" "data_container.tar.gz"; then
            backup_success=1
        fi
        
        backup_from_container "/app/logs" "logs_container.tar.gz" || true
        backup_from_container "/app/reports" "reports_container.tar.gz" || true
    fi
    
    return $backup_success
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
create_restore_script() {
    cat > "$BACKUP_DIR/restore.sh" <<'EOF'
#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./restore.sh

set -e

BACKUP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$(dirname "$BACKUP_DIR")")"

echo "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞: $BACKUP_DIR"
echo "–í –ø—Ä–æ–µ–∫—Ç: $PROJECT_DIR"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
cd "$PROJECT_DIR"
docker-compose down 2>/dev/null || true

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ named volume
restore_to_volume() {
    local volume_name="$1"
    local archive_file="$2"
    
    if [ -f "$BACKUP_DIR/$archive_file" ]; then
        echo "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ volume $volume_name –∏–∑ $archive_file"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ volume –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        docker volume create "$volume_name" 2>/dev/null || true
        
        # –û—á–∏—Å—Ç–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        docker run --rm \
            -v "$volume_name":/target \
            alpine sh -c "rm -rf /target/* && mkdir -p /target"
            
        docker run --rm \
            -v "$BACKUP_DIR":/backup \
            -v "$volume_name":/target \
            alpine sh -c "cd /target && tar xzf /backup/$archive_file"
            
        echo "‚úÖ Volume $volume_name –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        echo "‚ö†Ô∏è  –ê—Ä—Ö–∏–≤ $archive_file –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ bind mount
restore_to_bind_mount() {
    local target_dir="$1"
    local archive_file="$2"
    
    if [ -f "$BACKUP_DIR/$archive_file" ]; then
        echo "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ bind mount $target_dir –∏–∑ $archive_file"
        
        mkdir -p "$target_dir"
        cd "$target_dir"
        tar xzf "$BACKUP_DIR/$archive_file"
        
        echo "‚úÖ Bind mount $target_dir –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        echo "‚ö†Ô∏è  –ê—Ä—Ö–∏–≤ $archive_file –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
echo ""
echo "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:"
echo "1) Named volumes (Dokploy)"
echo "2) Bind mounts (–æ–±—ã—á–Ω—ã–π Docker)"
echo "3) –û–±–∞ –º–µ—Ç–æ–¥–∞"
read -p "–í–∞—à –≤—ã–±–æ—Ä (1-3): " choice

case $choice in
    1)
        restore_to_volume "rosseti_data" "data_volume.tar.gz"
        restore_to_volume "rosseti_logs" "logs_volume.tar.gz"
        restore_to_volume "rosseti_reports" "reports_volume.tar.gz"
        ;;
    2)
        restore_to_bind_mount "$PROJECT_DIR/data" "data_bind.tar.gz"
        restore_to_bind_mount "$PROJECT_DIR/logs" "logs_bind.tar.gz"
        restore_to_bind_mount "$PROJECT_DIR/reports" "reports_bind.tar.gz"
        ;;
    3)
        restore_to_volume "rosseti_data" "data_volume.tar.gz"
        restore_to_volume "rosseti_logs" "logs_volume.tar.gz"
        restore_to_volume "rosseti_reports" "reports_volume.tar.gz"
        restore_to_bind_mount "$PROJECT_DIR/data" "data_bind.tar.gz"
        restore_to_bind_mount "$PROJECT_DIR/logs" "logs_bind.tar.gz"
        restore_to_bind_mount "$PROJECT_DIR/reports" "reports_bind.tar.gz"
        ;;
    *)
        echo "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
        exit 1
        ;;
esac

echo ""
echo "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
echo "cd $PROJECT_DIR && docker-compose up -d"
EOF

    chmod +x "$BACKUP_DIR/restore.sh"
    print_success "–°–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω: restore.sh"
}

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤
cleanup_old_backups() {
    print_info "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤..."
    
    local backup_parent_dir="$PROJECT_DIR/backups"
    if [ -d "$backup_parent_dir" ]; then
        # –£–¥–∞–ª—è–µ–º –±—ç–∫–∞–ø—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
        find "$backup_parent_dir" -name "deploy_*" -type d -mtime +30 -exec rm -rf {} + 2>/dev/null || true
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –±—ç–∫–∞–ø–æ–≤
        ls -dt "$backup_parent_dir"/deploy_* 2>/dev/null | tail -n +11 | xargs rm -rf 2>/dev/null || true
        
        print_success "–°—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã –æ—á–∏—â–µ–Ω—ã"
    fi
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    cd "$PROJECT_DIR"
    
    # –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    export_current_settings
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –±—ç–∫–∞–ø
    if main_backup; then
        print_success "–ë—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö"
        print_warning "–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ –±—ã–ª–æ –∑–∞–ø—É—â–µ–Ω–æ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    create_restore_script
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤
    cleanup_old_backups
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    echo ""
    print_success "=== –ë–≠–ö–ê–ü –ó–ê–í–ï–†–®–ï–ù ==="
    print_info "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–∞: $BACKUP_DIR"
    print_info "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:"
    ls -la "$BACKUP_DIR"
    
    echo ""
    print_warning "–í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø—É—Ç—å –∫ –±—ç–∫–∞–ø—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:"
    echo "$BACKUP_DIR"
    
    echo ""
    print_info "–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
    echo "cd $BACKUP_DIR && ./restore.sh"
}

# –ó–∞–ø—É—Å–∫
main "$@"
