/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞
 */
/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –≤—ã–∑–æ–≤–∞
 */
function generateCallId() {
    const timestamp = Date.now().toString(36);
    const random = Math.random().toString(36).substring(2, 8);
    return `${timestamp}-${random}`;
}
/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞
 */
function generateLogFilename(callId) {
    const now = new Date();
    const dateStr = now.toISOString().slice(0, 10); // YYYY-MM-DD
    const timeStr = now.toTimeString().slice(0, 8).replace(/:/g, "-"); // HH-MM-SS
    return `parser-call-${dateStr}-${timeStr}-${callId}.json`;
}
/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞ –≤—ã–∑–æ–≤–∞ –≤ —Ñ–∞–π–ª
 */
export async function saveParserCallLog(log) {
    try {
        const fs = await import("fs/promises");
        const path = await import("path");
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ logs —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const logsDir = path.resolve("logs");
        await fs.mkdir(logsDir, { recursive: true });
        const filename = generateLogFilename(log.callId);
        const filepath = path.join(logsDir, filename);
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JSON —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        const jsonContent = JSON.stringify(log, null, 2);
        await fs.writeFile(filepath, jsonContent, "utf-8");
        console.log(`üìù –õ–æ–≥ –≤—ã–∑–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filepath}`);
        return filepath;
    }
    catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞:", error.message);
        throw error;
    }
}
/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞
 */
export class ParserCallLogger {
    callId;
    startTime;
    callType;
    request;
    searchTarget;
    constructor(callType, url, method = "GET", parameters, searchTarget = "Unknown") {
        this.callId = generateCallId();
        this.startTime = Date.now();
        this.callType = callType;
        this.request = {
            url,
            method,
            ...(parameters && { parameters }),
        };
        this.searchTarget = searchTarget;
        console.log(`üöÄ –ù–∞—á–∞—Ç –≤—ã–∑–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞ [${this.callId}]: ${callType}`);
    }
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞ —Å —É—Å–ø–µ—à–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
     */
    async logSuccess(data, metadata) {
        const duration = Date.now() - this.startTime;
        const log = {
            callId: this.callId,
            timestamp: new Date(this.startTime).toISOString(),
            callType: this.callType,
            request: this.request,
            response: {
                success: true,
                duration,
                itemsFound: data.length,
                data,
            },
            metadata: {
                searchTarget: this.searchTarget,
                ...metadata,
            },
        };
        console.log(`‚úÖ –í—ã–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ [${this.callId}]: –Ω–∞–π–¥–µ–Ω–æ ${data.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞ ${duration}–º—Å`);
        return await saveParserCallLog(log);
    }
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞ —Å –æ—à–∏–±–∫–æ–π
     */
    async logError(error, metadata) {
        const duration = Date.now() - this.startTime;
        const log = {
            callId: this.callId,
            timestamp: new Date(this.startTime).toISOString(),
            callType: this.callType,
            request: this.request,
            response: {
                success: false,
                duration,
                itemsFound: 0,
                error: error.message,
            },
            metadata: {
                searchTarget: this.searchTarget,
                ...metadata,
            },
        };
        console.log(`‚ùå –í—ã–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π [${this.callId}]: ${error.message} –∑–∞ ${duration}–º—Å`);
        return await saveParserCallLog(log);
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–∑–æ–≤–∞
     */
    getCallId() {
        return this.callId;
    }
}
//# sourceMappingURL=callLogger.js.map