/**
 * –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ ${MY_PLACE}
 */

import { chromium, Browser, Page } from "playwright";
import {
  logger,
  buildSearchUrl,
  MY_PLACE,
  findMyPlaceInRow,
  findPriozeryeInRow,
  extractPowerOutageInfo,
  ParserCallLogger,
} from "./utils/index.js";
import type {
  PriozeryeRow,
  PriozeryeSearchResult,
  PowerOutageInfo,
} from "./utils/types.js";

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ ${MY_PLACE}
 * @param url - URL –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
 */
export async function findPriozeryeInTables(
  url: string
): Promise<PriozeryeSearchResult> {
  const callLogger = new ParserCallLogger(
    "findPriozeryeInTables",
    url,
    "GET",
    {},
    MY_PLACE
  );

  const browser = await chromium.launch({
    headless: true,
    args: ["--no-sandbox", "--disable-setuid-sandbox"],
  });

  const page = await browser.newPage();

  try {
    logger.info(`–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${url}`);

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await page.goto(url, {
      waitUntil: "domcontentloaded", // –ë—ã—Å—Ç—Ä–µ–µ —á–µ–º networkidle
      timeout: 60000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout
    });

    // –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü
    await page.waitForSelector("table", { timeout: 20000 });

    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ü—Ä–∏–æ–∑–µ—Ä—å–µ–º
    const result = await searchPriozeryeInPage(page);

    logger.info(
      `–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ ${result.matchesFound} —Å—Ç—Ä–æ–∫ —Å ${MY_PLACE}`
    );

    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await callLogger.logSuccess(result.rows, {
      tablesFound: result.totalRows > 0 ? 1 : 0,
      totalRows: result.totalRows,
    });

    return result;
  } catch (error) {
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    await callLogger.logError(error as Error);
    throw error;
  } finally {
    await browser.close();
  }
}

/**
 * –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ —Å ${MY_PLACE} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 */
async function searchPriozeryeInPage(
  page: Page
): Promise<PriozeryeSearchResult> {
  const tables = await page.$$("table");
  logger.info(`–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tables.length}`);

  const foundRows: PriozeryeRow[] = [];
  let totalRows = 0;

  for (const [tableIndex, table] of tables.entries()) {
    const rows = await table.$$("tr");
    totalRows += rows.length;

    logger.info(`–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ ${tableIndex + 1}: ${rows.length}`);

    for (const [rowIndex, row] of rows.entries()) {
      const cells = await row.$$("td");

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —è—á–µ–µ–∫ (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
      if (cells.length === 0) continue;

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤—Å–µ—Ö —è—á–µ–µ–∫
      const cellTexts = await Promise.all(
        cells.map(async (cell) => {
          const text = await cell.textContent();
          return text?.trim() || "";
        })
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ${MY_PLACE} –≤ —Å—Ç—Ä–æ–∫–µ
      const priozeryeMatch = findPriozeryeInRow(cellTexts);

      if (priozeryeMatch) {
        const rawHtml = await row.innerHTML();

        foundRows.push({
          settlementVariant: priozeryeMatch.variant,
          columns: cellTexts,
          foundInColumn: priozeryeMatch.columnIndex,
          rawHtml,
        });

        logger.debug(
          `–ù–∞–π–¥–µ–Ω–æ ${priozeryeMatch.variant} –≤ —Ç–∞–±–ª–∏—Ü–µ ${
            tableIndex + 1
          }, —Å—Ç—Ä–æ–∫–µ ${rowIndex + 1}, –∫–æ–ª–æ–Ω–∫–µ ${priozeryeMatch.columnIndex + 1}`
        );
      }
    }
  }

  return {
    rows: foundRows,
    totalRows,
    matchesFound: foundRows.length,
  };
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –ø–æ MY_PLACE
 * @param url - URL –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @returns –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö
 */
export async function findPowerOutages(
  url: string
): Promise<PowerOutageInfo[]> {
  const callLogger = new ParserCallLogger(
    "findPowerOutages",
    url,
    "GET",
    {},
    MY_PLACE
  );

  const browser = await chromium.launch({
    headless: true,
    args: ["--no-sandbox", "--disable-setuid-sandbox"],
  });

  const page = await browser.newPage();

  try {
    console.log(`\nüåê –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô URL:`);
    console.log(url);
    console.log(`========================\n`);

    logger.info(`–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${url}`);

    await page.goto(url, {
      waitUntil: "domcontentloaded",
      timeout: 60000,
    });

    await page.waitForSelector("table", { timeout: 20000 });

    const powerOutages = await searchPowerOutagesInPage(page);

    logger.info(
      `–ù–∞–π–¥–µ–Ω–æ ${powerOutages.length} –∑–∞–ø–∏—Å–µ–π —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è–º–∏ –¥–ª—è ${MY_PLACE}`
    );

    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await callLogger.logSuccess(powerOutages, {
      tablesFound: powerOutages.length > 0 ? 1 : 0,
    });

    return powerOutages;
  } catch (error) {
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    await callLogger.logError(error as Error);
    throw error;
  } finally {
    await browser.close();
  }
}

/**
 * –ü–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 */
async function searchPowerOutagesInPage(
  page: Page
): Promise<PowerOutageInfo[]> {
  const tables = await page.$$("table");
  logger.info(`–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tables.length}`);

  const powerOutages: PowerOutageInfo[] = [];

  for (const [tableIndex, table] of tables.entries()) {
    const rows = await table.$$("tr");

    for (const row of rows) {
      const cells = await row.$$("td");

      if (cells.length === 0) continue;

      const cellTexts = await Promise.all(
        cells.map(async (cell) => {
          const text = await cell.textContent();
          return text?.trim() || "";
        })
      );

      const placeColumnIndex = findMyPlaceInRow(cellTexts);

      if (placeColumnIndex !== null) {
        const outageInfo = extractPowerOutageInfo(cellTexts);
        powerOutages.push(outageInfo);

        logger.debug(
          `–ù–∞–π–¥–µ–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è ${MY_PLACE}: ${JSON.stringify(outageInfo)}`
        );
      }
    }
  }

  return powerOutages;
}

/**
 * –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
 */
export async function quickFindPriozerie(
  days: number = 30
): Promise<PriozeryeRow[]> {
  const today = new Date();
  const dateFrom = new Date(today);
  dateFrom.setDate(today.getDate() - days);

  const url = buildSearchUrl(dateFrom, today);
  const callLogger = new ParserCallLogger(
    "quickFind",
    url,
    "GET",
    { days },
    MY_PLACE
  );

  try {
    const result = await findPriozeryeInTables(url);

    // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ findPriozeryeInTables —É–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç
    return result.rows;
  } catch (error) {
    await callLogger.logError(error as Error);
    throw error;
  }
}

/**
 * –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è MY_PLACE –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
 */
export async function quickFindPowerOutages(
  days: number = 30
): Promise<PowerOutageInfo[]> {
  const today = new Date();
  const dateFrom = new Date(today);
  dateFrom.setDate(today.getDate() - days);

  const url = buildSearchUrl(dateFrom, today);
  const callLogger = new ParserCallLogger(
    "quickFind",
    url,
    "GET",
    { days },
    MY_PLACE
  );

  try {
    const result = await findPowerOutages(url);

    // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ findPowerOutages —É–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç
    return result;
  } catch (error) {
    await callLogger.logError(error as Error);
    throw error;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export { buildSearchUrl };
